{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shyuniz\\\\Desktop\\\\moreh\\\\self-kubernetes\\\\components\\\\organisms\\\\ClusterHexItem.tsx\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport styled, { css } from 'styled-components';\nimport Setting from '../../lib/setting.json';\nconst hoverSize = {\n  width: 400,\n  height: 200\n};\nconst StyledItemWrapper = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"ClusterHexItem__StyledItemWrapper\",\n  componentId: \"sc-1utj8fj-0\"\n})([\"position:relative;flex:0 0 60px;height:60px;border:2px solid #999;border-top-right-radius:15px;border-bottom-left-radius:15px;margin:2px;background-color:\", \";user-select:none;cursor:pointer;\"], props => props.connect ? '#ffe996' : 'transparent');\nconst StyledValueStatus = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"ClusterHexItem__StyledValueStatus\",\n  componentId: \"sc-1utj8fj-1\"\n})([\"position:absolute;top:0px;left:0px;width:100%;height:100%;background-color:#e1272c;border-top-right-radius:15px;border-bottom-left-radius:15px;opacity:\", \";\"], props => props.value ? props.value : 0);\nconst StyledConnectionStatus = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"ClusterHexItem__StyledConnectionStatus\",\n  componentId: \"sc-1utj8fj-2\"\n})([\"border-radius:50%;position:absolute;top:4px;left:4px;width:10px;height:10px;border:1px solid #888;background-color:\", \";\"], props => props.connect ? 'green' : 'red');\nconst StyledHoverContent = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"ClusterHexItem__StyledHoverContent\",\n  componentId: \"sc-1utj8fj-3\"\n})([\"display:\", \";position:absolute;width:\", \"px;height:\", \"px;top:10px;left:10px;z-index:1;\", \"\"], props => props.hover ? 'block' : 'none', hoverSize.width, hoverSize.height, props => {\n  if (props.hover && props.hover['x'] && props.hover['x'] + hoverSize.width > window.innerWidth) {\n    if (props.hover && props.hover['y'] && props.hover['y'] + hoverSize.height > window.innerHeight) {\n      return css([\"right:0px;left:unset;bottom:0px;top:unset;\"]);\n    }\n\n    return css([\"right:0px;left:unset;\"]);\n  }\n\n  if (props.hover && props.hover['y'] && props.hover['y'] + hoverSize.height > window.innerHeight) {\n    return css([\"bottom:0px;top:unset;\"]);\n  }\n});\nconst StyledHoverContentBodyWrapper = /*#__PURE__*/styled.ul.withConfig({\n  displayName: \"ClusterHexItem__StyledHoverContentBodyWrapper\",\n  componentId: \"sc-1utj8fj-4\"\n})([\"display:flex;flex-wrap:wrap;align-items:bottom;width:\", \"px;height:\", \"px;overflow:auto;padding:10px;border:2px solid \", \";border-radius:10px;background-color:\", \";& > li{border-bottom:1px solid #eee;}& > li.subject{flex:0 0 70%;font-weight:600;text-align:right;padding-right:10px;}& > li.value{flex:0 0 30%;text-align:right;border-left:1px solid #eee;}\"], hoverSize.width, hoverSize.height, ({\n  theme\n}) => theme.colors.hover, ({\n  theme\n}) => theme.colors.border);\n\nconst settingAxios = ip => {\n  const conn = axios.create({\n    baseURL: ip,\n    timeout: 10 * 1000\n  });\n  conn.interceptors.request.use(config => {\n    config.params = {\n      startTime: new Date()\n    };\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n  conn.interceptors.response.use(response => {\n    response.config.params.endTime = new Date();\n    response.config.params.duration = response.config.params.endTime - response.config.params.startTime;\n    return response;\n  }, error => {\n    error.config.params.endTime = new Date();\n    error.config.params.duration = error.config.params.endTime - error.config.params.startTime;\n    return Promise.reject(error);\n  });\n  return conn;\n};\n\nconst findTreeInNvidia = (jsonObject, search) => {\n  const token = '>';\n\n  if (search.indexOf(token) < 0) {\n    return jsonObject[search];\n  } else {\n    const target = search.substr(0, search.indexOf(token));\n    const param = search.substr(search.indexOf(token) + token.length);\n\n    if (typeof jsonObject[target] === 'object') {\n      return findTreeInNvidia(jsonObject[target], param);\n    } else if (typeof jsonObject[target] === 'string') {\n      return jsonObject[target];\n    }\n  }\n\n  return undefined;\n};\n\nexport const ClusterHexItem = ({\n  name,\n  type,\n  ip,\n  filter,\n  range\n}) => {\n  const conn = settingAxios(ip);\n  const filtered = Setting.filterOption.filter(el => el.value === filter);\n  const {\n    0: duration,\n    1: setDuration\n  } = useState(-1);\n  const {\n    0: result,\n    1: setResult\n  } = useState(undefined);\n  const {\n    0: latency,\n    1: setLatency\n  } = useState(-1);\n  const {\n    0: amdGpuList,\n    1: setAmdGpuList\n  } = useState([]);\n  const {\n    0: hover,\n    1: setHover\n  } = useState(false);\n  const {\n    0: values,\n    1: setValues\n  } = useState([]);\n  const test = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\n  const envAMD = Setting.amd;\n  const envNVIDIA = Setting.nvidia;\n  useEffect(() => {\n    let unmount = false;\n\n    const onLoadApi = () => {\n      const url = type === 'amd' ? `/${type}/api/min` : `/${type}/api`;\n      conn.get(url).then(response => {\n        if (unmount) return;\n        setDuration(response.config.params.duration);\n\n        if (response.status === 200) {\n          setLatency(response.data.commandDelay);\n\n          if (type === 'nvidia') {\n            if (response.data.error === 'ok') {\n              setResult(response.data.smiResult.nvidia_smi_log);\n            } else {\n              console.error(response.data.error);\n            }\n          } else if (type === 'amd') {\n            if (response.data.error === 'ok') {\n              setResult(response);\n\n              if (amdGpuList.length !== response.data.smiResult.length) {\n                setAmdGpuList(Object.keys(response.data.smiResult));\n              }\n            } else {\n              console.error(response.data.error);\n            }\n          }\n        } else {\n          setResult(undefined);\n        }\n      }).catch(error => {\n        if (unmount) return;\n        setDuration(-1);\n        console.log('error', error);\n      });\n    };\n\n    const interval = setInterval(() => {\n      onLoadApi();\n    }, 1000);\n    return () => {\n      unmount = true;\n      clearInterval(interval);\n    };\n  }, []);\n  useEffect(() => {\n    if (result) {\n      if (type === 'amd' && amdGpuList.length > 0) {\n        const data = result.data.smiResult;\n        const tempArray = [];\n        amdGpuList.forEach(device => {\n          if (device === 'system') return;\n\n          if (filtered.length > 0) {\n            tempArray.push({\n              name: data[device][envAMD.deviceName],\n              value: data[device][filtered[0].amd]\n            });\n          }\n        });\n        setValues(tempArray);\n      }\n\n      if (type === 'nvidia') {\n        const data = result.gpu;\n        const tempArray = [];\n        data.forEach((device, deviceIndex) => {\n          tempArray.push({\n            name: device[envNVIDIA.deviceName],\n            value: findTreeInNvidia(data[deviceIndex], filtered[0].nvidia)\n          });\n        });\n        setValues(tempArray);\n      }\n    }\n  }, [result]);\n\n  const getParseValue = () => {\n    if (values.length === 0) return 0;\n\n    switch (range) {\n      case 'avg':\n        let sum = 0;\n        values.forEach(el => sum += parseInt(el.value, 10));\n        return sum / values.length || 0;\n\n      case 'max':\n        let max = -Infinity;\n        values.forEach(el => max = Math.max(max, parseInt(el.value, 10)));\n        return max;\n\n      case 'min':\n        let min = Infinity;\n        values.forEach(el => min = Math.min(min, parseInt(el.value, 10)));\n        return min;\n\n      default:\n        return 0;\n    }\n  };\n\n  return __jsx(React.Fragment, null, __jsx(StyledItemWrapper // key={key}\n  , {\n    connect: duration !== -1,\n    value: 0,\n    onMouseEnter: e => setHover({\n      x: e.clientX,\n      y: e.clientY\n    }),\n    onMouseLeave: () => setHover(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }\n  }, __jsx(StyledValueStatus, {\n    value: getParseValue() * 0.01,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }), __jsx(StyledConnectionStatus, {\n    connect: duration !== -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 9\n    }\n  }), __jsx(StyledHoverContent, {\n    hover: hover,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }\n  }, __jsx(StyledHoverContentBodyWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 11\n    }\n  }, __jsx(\"li\", {\n    className: 'subject',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }\n  }, \"Name\"), __jsx(\"li\", {\n    className: 'value',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 13\n    }\n  }, name), __jsx(\"li\", {\n    className: 'subject',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 13\n    }\n  }, \"Network\"), __jsx(\"li\", {\n    className: 'value',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }\n  }, duration === -1 ? '' : `${duration / 1000}s`), __jsx(\"li\", {\n    className: 'subject',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }, \"Command\"), __jsx(\"li\", {\n    className: 'value',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 13\n    }\n  }, latency === -1 ? '' : `${latency / 1000}s`), values.map((el, elIndex) => __jsx(Fragment, {\n    key: elIndex,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 15\n    }\n  }, __jsx(\"li\", {\n    className: 'subject',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 17\n    }\n  }, el.name), __jsx(\"li\", {\n    className: 'value',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 17\n    }\n  }, el.value)))))));\n};\nexport default ClusterHexItem;","map":{"version":3,"sources":["C:/Users/shyuniz/Desktop/moreh/self-kubernetes/components/organisms/ClusterHexItem.tsx"],"names":["React","Fragment","useEffect","useState","axios","styled","css","Setting","hoverSize","width","height","StyledItemWrapper","div","props","connect","StyledValueStatus","value","StyledConnectionStatus","StyledHoverContent","hover","window","innerWidth","innerHeight","StyledHoverContentBodyWrapper","ul","theme","colors","border","settingAxios","ip","conn","create","baseURL","timeout","interceptors","request","use","config","params","startTime","Date","error","Promise","reject","response","endTime","duration","findTreeInNvidia","jsonObject","search","token","indexOf","target","substr","param","length","undefined","ClusterHexItem","name","type","filter","range","filtered","filterOption","el","setDuration","result","setResult","latency","setLatency","amdGpuList","setAmdGpuList","setHover","values","setValues","test","envAMD","amd","envNVIDIA","nvidia","unmount","onLoadApi","url","get","then","status","data","commandDelay","smiResult","nvidia_smi_log","console","Object","keys","catch","log","interval","setInterval","clearInterval","tempArray","forEach","device","push","deviceName","gpu","deviceIndex","getParseValue","sum","parseInt","max","Infinity","Math","min","e","x","clientX","y","clientY","map","elIndex"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\r\nimport axios, { AxiosInstance } from 'axios';\r\nimport styled, { css } from 'styled-components';\r\n\r\nimport Setting from '../../lib/setting.json';\r\n\r\nconst hoverSize = {\r\n  width: 400,\r\n  height: 200\r\n};\r\ntype mouseXY = {\r\n  x: number;\r\n  y: number;\r\n};\r\ntype HexStatus = {\r\n  hover?: boolean | mouseXY;\r\n  connect?: boolean;\r\n  value?: number;\r\n};\r\ntype valueProps = {\r\n  name: string;\r\n  value: string;\r\n};\r\n\r\nconst StyledItemWrapper = styled.div<HexStatus>`\r\n  position: relative;\r\n  flex: 0 0 60px;\r\n  height: 60px;\r\n  border: 2px solid #999;\r\n  border-top-right-radius: 15px;\r\n  border-bottom-left-radius: 15px;\r\n  margin: 2px;\r\n  background-color: ${(props) => (props.connect ? '#ffe996' : 'transparent')};\r\n  user-select: none;\r\n  cursor: pointer;\r\n`;\r\nconst StyledValueStatus = styled.div<HexStatus>`\r\n  position: absolute;\r\n  top: 0px;\r\n  left: 0px;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #e1272c;\r\n  border-top-right-radius: 15px;\r\n  border-bottom-left-radius: 15px;\r\n  opacity: ${(props) => (props.value ? props.value : 0)};\r\n`;\r\nconst StyledConnectionStatus = styled.div<HexStatus>`\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  top: 4px;\r\n  left: 4px;\r\n  width: 10px;\r\n  height: 10px;\r\n  border: 1px solid #888;\r\n  background-color: ${(props) => (props.connect ? 'green' : 'red')};\r\n`;\r\nconst StyledHoverContent = styled.div<HexStatus>`\r\n  display: ${(props) => (props.hover ? 'block' : 'none')};\r\n  position: absolute;\r\n  width: ${hoverSize.width}px;\r\n  height: ${hoverSize.height}px;\r\n  top: 10px;\r\n  left: 10px;\r\n  z-index: 1;\r\n  ${(props) => {\r\n    if (props.hover && props.hover['x'] && props.hover['x'] + hoverSize.width > window.innerWidth) {\r\n      if (props.hover && props.hover['y'] && props.hover['y'] + hoverSize.height > window.innerHeight) {\r\n        return css`\r\n          right: 0px;\r\n          left: unset;\r\n          bottom: 0px;\r\n          top: unset;\r\n        `;\r\n      }\r\n      return css`\r\n        right: 0px;\r\n        left: unset;\r\n      `;\r\n    }\r\n    if (props.hover && props.hover['y'] && props.hover['y'] + hoverSize.height > window.innerHeight) {\r\n      return css`\r\n        bottom: 0px;\r\n        top: unset;\r\n      `;\r\n    }\r\n  }}\r\n`;\r\nconst StyledHoverContentBodyWrapper = styled.ul`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: bottom;\r\n  width: ${hoverSize.width}px;\r\n  height: ${hoverSize.height}px;\r\n  overflow: auto;\r\n  padding: 10px;\r\n  border: 2px solid ${({ theme }) => theme.colors.hover};\r\n  border-radius: 10px;\r\n  background-color: ${({ theme }) => theme.colors.border};\r\n  & > li {\r\n    border-bottom: 1px solid #eee;\r\n  }\r\n  & > li.subject {\r\n    flex: 0 0 70%;\r\n    font-weight: 600;\r\n    text-align: right;\r\n    padding-right: 10px;\r\n  }\r\n  & > li.value {\r\n    flex: 0 0 30%;\r\n    text-align: right;\r\n    border-left: 1px solid #eee;\r\n  }\r\n`;\r\n\r\nexport type ClusterHexItemProps = {\r\n  /**\r\n   * Node name\r\n   */\r\n  name: string;\r\n  /**\r\n   * Node type\r\n   */\r\n  type: 'amd' | 'nvidia' | string;\r\n  /**\r\n   * Node IP\r\n   */\r\n  ip: string;\r\n  /**\r\n   * Filter type\r\n   */\r\n  filter: string;\r\n  /**\r\n   * Range type\r\n   */\r\n  range: 'avg' | 'max' | 'min' | string;\r\n};\r\n\r\nconst settingAxios = (ip: string): AxiosInstance => {\r\n  const conn = axios.create({\r\n    baseURL: ip,\r\n    timeout: 10 * 1000\r\n  });\r\n\r\n  conn.interceptors.request.use(\r\n    (config) => {\r\n      config.params = { startTime: new Date() };\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  conn.interceptors.response.use(\r\n    (response) => {\r\n      response.config.params.endTime = new Date();\r\n      response.config.params.duration = response.config.params.endTime - response.config.params.startTime;\r\n      return response;\r\n    },\r\n    (error) => {\r\n      error.config.params.endTime = new Date();\r\n      error.config.params.duration = error.config.params.endTime - error.config.params.startTime;\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  return conn;\r\n};\r\n\r\nconst findTreeInNvidia = (jsonObject: any, search: string) => {\r\n  const token = '>';\r\n  if (search.indexOf(token) < 0) {\r\n    return jsonObject[search];\r\n  } else {\r\n    const target = search.substr(0, search.indexOf(token));\r\n    const param = search.substr(search.indexOf(token) + token.length);\r\n    if (typeof jsonObject[target] === 'object') {\r\n      return findTreeInNvidia(jsonObject[target], param);\r\n    } else if (typeof jsonObject[target] === 'string') {\r\n      return jsonObject[target];\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const ClusterHexItem: React.FC<ClusterHexItemProps> = ({ name, type, ip, filter, range }) => {\r\n  const conn = settingAxios(ip);\r\n  const filtered = Setting.filterOption.filter((el) => el.value === filter);\r\n\r\n  const [duration, setDuration] = useState<number>(-1);\r\n  const [result, setResult] = useState<any>(undefined);\r\n  const [latency, setLatency] = useState<number>(-1);\r\n  const [amdGpuList, setAmdGpuList] = useState<string[]>([]);\r\n  const [hover, setHover] = useState<boolean | mouseXY>(false);\r\n  const [values, setValues] = useState<valueProps[]>([]);\r\n  const test = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19];\r\n\r\n  const envAMD = Setting.amd;\r\n  const envNVIDIA = Setting.nvidia;\r\n\r\n  useEffect(() => {\r\n    let unmount = false;\r\n    const onLoadApi = () => {\r\n      const url = type === 'amd' ? `/${type}/api/min` : `/${type}/api`;\r\n      conn\r\n        .get(url)\r\n        .then((response) => {\r\n          if (unmount) return;\r\n\r\n          setDuration(response.config.params.duration);\r\n\r\n          if (response.status === 200) {\r\n            setLatency(response.data.commandDelay);\r\n\r\n            if (type === 'nvidia') {\r\n              if (response.data.error === 'ok') {\r\n                setResult(response.data.smiResult.nvidia_smi_log);\r\n              } else {\r\n                console.error(response.data.error);\r\n              }\r\n            } else if (type === 'amd') {\r\n              if (response.data.error === 'ok') {\r\n                setResult(response);\r\n                if (amdGpuList.length !== response.data.smiResult.length) {\r\n                  setAmdGpuList(Object.keys(response.data.smiResult));\r\n                }\r\n              } else {\r\n                console.error(response.data.error);\r\n              }\r\n            }\r\n          } else {\r\n            setResult(undefined);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (unmount) return;\r\n          setDuration(-1);\r\n          console.log('error', error);\r\n        });\r\n    };\r\n\r\n    const interval = setInterval(() => {\r\n      onLoadApi();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      unmount = true;\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (result) {\r\n      if (type === 'amd' && amdGpuList.length > 0) {\r\n        const data = result.data.smiResult;\r\n        const tempArray: valueProps[] = [];\r\n\r\n        amdGpuList.forEach((device) => {\r\n          if (device === 'system') return;\r\n          if (filtered.length > 0) {\r\n            tempArray.push({\r\n              name: data[device][envAMD.deviceName],\r\n              value: data[device][filtered[0].amd]\r\n            });\r\n          }\r\n        });\r\n        setValues(tempArray);\r\n      }\r\n      if (type === 'nvidia') {\r\n        const data = result.gpu;\r\n        const tempArray: valueProps[] = [];\r\n        data.forEach((device, deviceIndex) => {\r\n          tempArray.push({\r\n            name: device[envNVIDIA.deviceName],\r\n            value: findTreeInNvidia(data[deviceIndex], filtered[0].nvidia)\r\n          });\r\n        });\r\n        setValues(tempArray);\r\n      }\r\n    }\r\n  }, [result]);\r\n\r\n  const getParseValue = () => {\r\n    if (values.length === 0) return 0;\r\n    switch (range) {\r\n      case 'avg':\r\n        let sum = 0;\r\n        values.forEach((el) => (sum += parseInt(el.value, 10)));\r\n        return sum / values.length || 0;\r\n      case 'max':\r\n        let max = -Infinity;\r\n        values.forEach((el) => (max = Math.max(max, parseInt(el.value, 10))));\r\n        return max;\r\n      case 'min':\r\n        let min = Infinity;\r\n        values.forEach((el) => (min = Math.min(min, parseInt(el.value, 10))));\r\n        return min;\r\n      default:\r\n        return 0;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* {test.map((_, key) => ( */}\r\n      <StyledItemWrapper\r\n        // key={key}\r\n        connect={duration !== -1}\r\n        value={0}\r\n        onMouseEnter={(e) => setHover({ x: e.clientX, y: e.clientY })}\r\n        onMouseLeave={() => setHover(false)}\r\n      >\r\n        <StyledValueStatus value={getParseValue() * 0.01} />\r\n        <StyledConnectionStatus connect={duration !== -1}></StyledConnectionStatus>\r\n        <StyledHoverContent hover={hover}>\r\n          <StyledHoverContentBodyWrapper>\r\n            <li className={'subject'}>Name</li>\r\n            <li className={'value'}>{name}</li>\r\n            <li className={'subject'}>Network</li>\r\n            <li className={'value'}>{duration === -1 ? '' : `${duration / 1000}s`}</li>\r\n            <li className={'subject'}>Command</li>\r\n            <li className={'value'}>{latency === -1 ? '' : `${latency / 1000}s`}</li>\r\n            {values.map((el, elIndex) => (\r\n              <Fragment key={elIndex}>\r\n                <li className={'subject'}>{el.name}</li>\r\n                <li className={'value'}>{el.value}</li>\r\n              </Fragment>\r\n            ))}\r\n          </StyledHoverContentBodyWrapper>\r\n        </StyledHoverContent>\r\n      </StyledItemWrapper>\r\n      {/* ))} */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClusterHexItem;\r\n"]},"metadata":{},"sourceType":"module"}