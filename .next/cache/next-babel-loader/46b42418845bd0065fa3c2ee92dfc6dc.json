{"ast":null,"code":"// import JSZip from 'jszip'\n// import { saveAs } from 'file-saver'\n// import xml from 'xmlserializer'\nexport const Util = {\n  colors: ['#9d96f5', '#e7bcf3', '#e690d1', '#fb7293', '#ff9f7f', '#ffdb5c', '#9fe6b8', '#67e0e3', '#37a2da', '#4424A7', '#8378ea', '#37A2DA', '#32C5E9', '#67E0E3', '#9FE6B8', '#FFDB5C', '#FF9F7F', '#FB7293', '#E062AE', '#E690D1', '#E7BCF3', '#9D96F5', '#8378EA', '#96BFFF'],\n  getYYYYMMDD: () => {\n    const pad2 = n => {\n      return n < 10 ? '0' + n : n;\n    };\n\n    const date = new Date();\n    return date.getFullYear().toString() + pad2(date.getMonth() + 1) + pad2(date.getDate()) + pad2(date.getHours()) + pad2(date.getMinutes()) + pad2(date.getSeconds());\n  },\n  getMMSS: () => {\n    const pad2 = n => {\n      return n < 10 ? '0' + n : n;\n    };\n\n    const date = new Date();\n    return '' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\n  },\n  exportCSVFile: (csv, fileName, header) => {\n    if (header) csv = [header, csv].join('\\n');\n    const fileType = 'txt/csv;charset=utf-8';\n    const e = document.createElement('a');\n    e.setAttribute('href', 'data:' + fileType + ',' + encodeURIComponent(csv));\n    e.setAttribute('download', fileName);\n    e.style.display = 'none';\n    document.body.appendChild(e);\n    e.click();\n    document.body.removeChild(e);\n  },\n  zeroPad: (num, numZeros) => {\n    const n = Math.abs(num);\n    const zeros = Math.max(0, numZeros - Math.floor(n).toString().length);\n    let zeroString = Math.pow(10, zeros).toString().substr(1);\n\n    if (num < 0) {\n      zeroString = '-' + zeroString;\n    }\n\n    return zeroString + n;\n  },\n  isFloat: val => {\n    return Number(val) === parseFloat(val) && Number(val) % 1 !== 0;\n  },\n  isInteger: val => {\n    return Number(val) === parseInt(val, 10);\n  },\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  getHeader: item => {\n    const temp = [];\n\n    for (const [key] of Object.entries(item)) {\n      temp.push(key);\n    }\n\n    return temp;\n  },\n  getIndexArray: (max, includeMax = false) => {\n    const arr = [];\n\n    for (let idx = 0; idx < max; idx++) {\n      arr.push(idx);\n    }\n\n    if (includeMax) arr.push(max);\n    return arr;\n  },\n  getFileNameFromPath: fullPath => {\n    return fullPath.replace(/^.*[\\\\/]/, '');\n  }\n}; // type ChartOption = {\n//   ratio?: string;\n//   addNumberingName?: string;\n//   chartType?: string;\n// };\n// export const Chart = {\n//   /**\n//    * @param chartSource source of used echart.\n//    * @param chartName chart name, used finding chart class. (ex. ${chartSource[n][chartName]}-mcs-chart).\n//    * if you used only string chart-name, then chartName is ''\n//    * if chartName === '' then can't use option.addNumberingName\n//    * @param zipName zip file name\n//    * @param success callback function when success\n//    * @param option { ChartOption }\n//    */\n//   downloadZip: (\n//     chartSource: any[],\n//     chartName: string,\n//     zipName: string,\n//     success: () => void,\n//     option?: ChartOption): void => {\n//     const _option: ChartOption = { ratio: '100', chartType: 'canvas', ...option }\n//     const zip = new JSZip()\n//     if (chartName === '') {\n//       for (const n in chartSource) {\n//         const wrapper = document.getElementsByClassName(`${chartSource[n]}-mcs-chart`)\n//         if (wrapper) {\n//           if (_option.chartType === 'svg') {\n//             const svg = wrapper[0].getElementsByTagName('svg')[0]\n//             const copySVG = svg.cloneNode(true) as SVGSVGElement\n//             const s = xml.serializeToString(copySVG)\n//             zip.file(`${chartSource[n]}.svg`, s)\n//           } else {\n//             const canvas = wrapper[0].getElementsByTagName('canvas')[0]\n//             const resizeCanvas = document.createElement('canvas')\n//             const ctx = resizeCanvas.getContext('2d')\n//             if (ctx) {\n//               const _w = Math.round(canvas.getBoundingClientRect().width * (parseInt(_option.ratio || '100', 10) / 100))\n//               const _h = Math.round(canvas.getBoundingClientRect().height * (parseInt(_option.ratio || '100', 10) / 100))\n//               resizeCanvas.width = _w\n//               resizeCanvas.height = _h\n//               ctx.drawImage(canvas, 0, 0, _w, _h)\n//             }\n//             const base64Image = resizeCanvas.toDataURL().replace(/^data:image\\/(png|jpg);base64,/, '')\n//             zip.file(`${chartSource[n]}.png`, base64Image, { base64: true })\n//           }\n//         }\n//       }\n//     } else {\n//       for (const n in chartSource) {\n//         const wrapper = document.getElementsByClassName(`${chartSource[n][chartName]}-mcs-chart`)\n//         if (wrapper) {\n//           if (_option.chartType === 'svg') {\n//             const svg = wrapper[0].getElementsByTagName('svg')[0]\n//             const copySVG = svg.cloneNode(true) as SVGSVGElement\n//             copySVG.setAttribute('background-color', '#fff')\n//             // console.log(copySVG.viewBox.baseVal)\n//             const s = xml.serializeToString(copySVG)\n//             zip.file(`${chartSource[n][chartName]}.svg`, s)\n//           } else {\n//             const canvas = wrapper[0].getElementsByTagName('canvas')[0]\n//             const resizeCanvas = document.createElement('canvas')\n//             const ctx = resizeCanvas.getContext('2d')\n//             if (ctx) {\n//               const _w = Math.round(canvas.getBoundingClientRect().width * (parseInt(_option.ratio || '100', 10) / 100))\n//               const _h = Math.round(canvas.getBoundingClientRect().height * (parseInt(_option.ratio || '100', 10) / 100))\n//               resizeCanvas.width = _w\n//               resizeCanvas.height = _h\n//               ctx.drawImage(canvas, 0, 0, _w, _h)\n//             }\n//             const base64Image = resizeCanvas.toDataURL().replace(/^data:image\\/(png|jpg);base64,/, '')\n//             if (_option.addNumberingName) {\n//               zip.file(`${Util.zeroPad(chartSource[n][_option.addNumberingName], 5)}_${chartSource[n][chartName]}.png`, base64Image, { base64: true })\n//             } else {\n//               zip.file(`${chartSource[n][chartName]}.png`, base64Image, { base64: true })\n//             }\n//           }\n//         }\n//       }\n//     }\n//     zip.generateAsync({ type: 'blob' }).then(content => {\n//       saveAs(content, `${zipName}.zip`)\n//       success()\n//     })\n//   },\n//   colors: ['#4424A7', '#8378ea', '#9d96f5', '#e7bcf3', '#e690d1', '#fb7293', '#ff9f7f', '#ffdb5c', '#9fe6b8', '#67e0e3', '#37a2da']\n// }\n\nexport default Util;","map":{"version":3,"sources":["C:/Users/shyuniz/Desktop/moreh/self-kubernetes/lib/utilMethods.tsx"],"names":["Util","colors","getYYYYMMDD","pad2","n","date","Date","getFullYear","toString","getMonth","getDate","getHours","getMinutes","getSeconds","getMMSS","exportCSVFile","csv","fileName","header","join","fileType","e","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","zeroPad","num","numZeros","Math","abs","zeros","max","floor","length","zeroString","pow","substr","isFloat","val","Number","parseFloat","isInteger","parseInt","getHeader","item","temp","key","Object","entries","push","getIndexArray","includeMax","arr","idx","getFileNameFromPath","fullPath","replace"],"mappings":"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AyB;AAClC,UAAMC,IAAc,GAAG,EAAvB;;AACA,SAAK,MAAM,CAACC,GAAD,CAAX,IAAoBC,MAAM,CAACC,OAAP,CAAeJ,IAAf,CAApB,EAA0C;AACxCC,MAAAA,IAAI,CAACI,IAAL,CAAUH,GAAV;AACD;;AACD,WAAOD,IAAP;AACD,GAnFiB;AAoFlBK,EAAAA,aAAa,EAAE,CAACnB,GAAD,EAAcoB,UAAU,GAAG,KAA3B,KAA+C;AAC5D,UAAMC,GAAG,GAAG,EAAZ;;AACA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGtB,GAAxB,EAA6BsB,GAAG,EAAhC,EAAoC;AAClCD,MAAAA,GAAG,CAACH,IAAJ,CAASI,GAAT;AACD;;AACD,QAAIF,UAAJ,EAAgBC,GAAG,CAACH,IAAJ,CAASlB,GAAT;AAChB,WAAOqB,GAAP;AACD,GA3FiB;AA4FlBE,EAAAA,mBAAmB,EAAGC,QAAD,IAA8B;AACjD,WAAOA,QAAQ,CAACC,OAAT,CAAiB,UAAjB,EAA6B,EAA7B,CAAP;AACD;AA9FiB,CAAb,C,CAiGP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe/D,IAAf","sourcesContent":["// import JSZip from 'jszip'\r\n// import { saveAs } from 'file-saver'\r\n// import xml from 'xmlserializer'\r\n\r\nexport const Util = {\r\n  colors: [\r\n    '#9d96f5',\r\n    '#e7bcf3',\r\n    '#e690d1',\r\n    '#fb7293',\r\n    '#ff9f7f',\r\n    '#ffdb5c',\r\n    '#9fe6b8',\r\n    '#67e0e3',\r\n    '#37a2da',\r\n    '#4424A7',\r\n    '#8378ea',\r\n\r\n    '#37A2DA',\r\n    '#32C5E9',\r\n    '#67E0E3',\r\n    '#9FE6B8',\r\n    '#FFDB5C',\r\n    '#FF9F7F',\r\n    '#FB7293',\r\n    '#E062AE',\r\n    '#E690D1',\r\n    '#E7BCF3',\r\n    '#9D96F5',\r\n    '#8378EA',\r\n    '#96BFFF'\r\n  ],\r\n\r\n  getYYYYMMDD: (): string => {\r\n    const pad2 = (n: number) => {\r\n      return n < 10 ? '0' + n : n;\r\n    };\r\n    const date = new Date();\r\n    return (\r\n      date.getFullYear().toString() +\r\n      pad2(date.getMonth() + 1) +\r\n      pad2(date.getDate()) +\r\n      pad2(date.getHours()) +\r\n      pad2(date.getMinutes()) +\r\n      pad2(date.getSeconds())\r\n    );\r\n  },\r\n  getMMSS: (): string => {\r\n    const pad2 = (n: number) => {\r\n      return n < 10 ? '0' + n : n;\r\n    };\r\n    const date = new Date();\r\n    return '' + pad2(date.getMinutes()) + ':' + pad2(date.getSeconds());\r\n  },\r\n  exportCSVFile: (csv: string, fileName: string, header?: string): void => {\r\n    if (header) csv = [header, csv].join('\\n');\r\n    const fileType = 'txt/csv;charset=utf-8';\r\n    const e = document.createElement('a');\r\n    e.setAttribute('href', 'data:' + fileType + ',' + encodeURIComponent(csv));\r\n    e.setAttribute('download', fileName);\r\n    e.style.display = 'none';\r\n    document.body.appendChild(e);\r\n    e.click();\r\n    document.body.removeChild(e);\r\n  },\r\n  zeroPad: (num: number, numZeros: number): string => {\r\n    const n = Math.abs(num);\r\n    const zeros = Math.max(0, numZeros - Math.floor(n).toString().length);\r\n    let zeroString = Math.pow(10, zeros).toString().substr(1);\r\n    if (num < 0) {\r\n      zeroString = '-' + zeroString;\r\n    }\r\n    return zeroString + n;\r\n  },\r\n  isFloat: (val: string): boolean => {\r\n    return Number(val) === parseFloat(val) && Number(val) % 1 !== 0;\r\n  },\r\n  isInteger: (val: string): boolean => {\r\n    return Number(val) === parseInt(val, 10);\r\n  },\r\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\n  getHeader: (item: any): string[] => {\r\n    const temp: string[] = [];\r\n    for (const [key] of Object.entries(item)) {\r\n      temp.push(key);\r\n    }\r\n    return temp;\r\n  },\r\n  getIndexArray: (max: number, includeMax = false): number[] => {\r\n    const arr = [];\r\n    for (let idx = 0; idx < max; idx++) {\r\n      arr.push(idx);\r\n    }\r\n    if (includeMax) arr.push(max);\r\n    return arr;\r\n  },\r\n  getFileNameFromPath: (fullPath: string): string => {\r\n    return fullPath.replace(/^.*[\\\\/]/, '');\r\n  }\r\n};\r\n\r\n// type ChartOption = {\r\n//   ratio?: string;\r\n//   addNumberingName?: string;\r\n//   chartType?: string;\r\n// };\r\n// export const Chart = {\r\n//   /**\r\n//    * @param chartSource source of used echart.\r\n//    * @param chartName chart name, used finding chart class. (ex. ${chartSource[n][chartName]}-mcs-chart).\r\n//    * if you used only string chart-name, then chartName is ''\r\n//    * if chartName === '' then can't use option.addNumberingName\r\n//    * @param zipName zip file name\r\n//    * @param success callback function when success\r\n//    * @param option { ChartOption }\r\n//    */\r\n//   downloadZip: (\r\n//     chartSource: any[],\r\n//     chartName: string,\r\n//     zipName: string,\r\n//     success: () => void,\r\n//     option?: ChartOption): void => {\r\n//     const _option: ChartOption = { ratio: '100', chartType: 'canvas', ...option }\r\n//     const zip = new JSZip()\r\n//     if (chartName === '') {\r\n//       for (const n in chartSource) {\r\n//         const wrapper = document.getElementsByClassName(`${chartSource[n]}-mcs-chart`)\r\n//         if (wrapper) {\r\n//           if (_option.chartType === 'svg') {\r\n//             const svg = wrapper[0].getElementsByTagName('svg')[0]\r\n//             const copySVG = svg.cloneNode(true) as SVGSVGElement\r\n//             const s = xml.serializeToString(copySVG)\r\n//             zip.file(`${chartSource[n]}.svg`, s)\r\n//           } else {\r\n//             const canvas = wrapper[0].getElementsByTagName('canvas')[0]\r\n//             const resizeCanvas = document.createElement('canvas')\r\n//             const ctx = resizeCanvas.getContext('2d')\r\n//             if (ctx) {\r\n//               const _w = Math.round(canvas.getBoundingClientRect().width * (parseInt(_option.ratio || '100', 10) / 100))\r\n//               const _h = Math.round(canvas.getBoundingClientRect().height * (parseInt(_option.ratio || '100', 10) / 100))\r\n//               resizeCanvas.width = _w\r\n//               resizeCanvas.height = _h\r\n//               ctx.drawImage(canvas, 0, 0, _w, _h)\r\n//             }\r\n//             const base64Image = resizeCanvas.toDataURL().replace(/^data:image\\/(png|jpg);base64,/, '')\r\n//             zip.file(`${chartSource[n]}.png`, base64Image, { base64: true })\r\n//           }\r\n//         }\r\n//       }\r\n//     } else {\r\n//       for (const n in chartSource) {\r\n//         const wrapper = document.getElementsByClassName(`${chartSource[n][chartName]}-mcs-chart`)\r\n//         if (wrapper) {\r\n//           if (_option.chartType === 'svg') {\r\n//             const svg = wrapper[0].getElementsByTagName('svg')[0]\r\n//             const copySVG = svg.cloneNode(true) as SVGSVGElement\r\n//             copySVG.setAttribute('background-color', '#fff')\r\n//             // console.log(copySVG.viewBox.baseVal)\r\n//             const s = xml.serializeToString(copySVG)\r\n//             zip.file(`${chartSource[n][chartName]}.svg`, s)\r\n//           } else {\r\n//             const canvas = wrapper[0].getElementsByTagName('canvas')[0]\r\n//             const resizeCanvas = document.createElement('canvas')\r\n//             const ctx = resizeCanvas.getContext('2d')\r\n//             if (ctx) {\r\n//               const _w = Math.round(canvas.getBoundingClientRect().width * (parseInt(_option.ratio || '100', 10) / 100))\r\n//               const _h = Math.round(canvas.getBoundingClientRect().height * (parseInt(_option.ratio || '100', 10) / 100))\r\n//               resizeCanvas.width = _w\r\n//               resizeCanvas.height = _h\r\n//               ctx.drawImage(canvas, 0, 0, _w, _h)\r\n//             }\r\n//             const base64Image = resizeCanvas.toDataURL().replace(/^data:image\\/(png|jpg);base64,/, '')\r\n//             if (_option.addNumberingName) {\r\n//               zip.file(`${Util.zeroPad(chartSource[n][_option.addNumberingName], 5)}_${chartSource[n][chartName]}.png`, base64Image, { base64: true })\r\n//             } else {\r\n//               zip.file(`${chartSource[n][chartName]}.png`, base64Image, { base64: true })\r\n//             }\r\n//           }\r\n//         }\r\n//       }\r\n//     }\r\n//     zip.generateAsync({ type: 'blob' }).then(content => {\r\n//       saveAs(content, `${zipName}.zip`)\r\n//       success()\r\n//     })\r\n//   },\r\n//   colors: ['#4424A7', '#8378ea', '#9d96f5', '#e7bcf3', '#e690d1', '#fb7293', '#ff9f7f', '#ffdb5c', '#9fe6b8', '#67e0e3', '#37a2da']\r\n// }\r\n\r\nexport default Util;\r\n"]},"metadata":{},"sourceType":"module"}