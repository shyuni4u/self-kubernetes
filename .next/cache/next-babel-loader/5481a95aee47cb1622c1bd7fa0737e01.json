{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\shyuniz\\\\Desktop\\\\moreh\\\\self-kubernetes\\\\components\\\\organisms\\\\ClusterChartItem.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useState, Fragment } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport ReactEcharts from 'echarts-for-react';\nimport echarts from 'echarts';\nimport Util from '../../lib/utilMethods';\nimport Setting from '../../lib/setting.json';\nvar StyledItemWrapper = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"ClusterChartItem__StyledItemWrapper\",\n  componentId: \"sc-1upiinl-0\"\n})([\"position:relative;flex:0 0 400px;border:1px solid #fff;margin:5px;padding-top:100px;\"]);\n_c = StyledItemWrapper;\nvar StyledItemTitle = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"ClusterChartItem__StyledItemTitle\",\n  componentId: \"sc-1upiinl-1\"\n})([\"position:absolute;display:flex;align-items:center;top:5px;left:5px;color:#fff;font-size:14px;user-select:none;& > .upper{text-transform:uppercase;margin-right:5px;}\"]);\n_c2 = StyledItemTitle;\nvar StyledItemLegendList = /*#__PURE__*/styled.ul.withConfig({\n  displayName: \"ClusterChartItem__StyledItemLegendList\",\n  componentId: \"sc-1upiinl-2\"\n})([\"position:absolute;top:35px;left:5px;width:calc(400px - 10px);max-height:60px;overflow-y:auto;color:#fff;font-size:14px;user-select:none;border-top:1px solid #ccc;border-bottom:1px solid #ccc;& > li{display:flex;align-items:center;}\"]);\n_c3 = StyledItemLegendList;\nvar StyledItemChartWrapper = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"ClusterChartItem__StyledItemChartWrapper\",\n  componentId: \"sc-1upiinl-3\"\n})([\"width:400px;display:flex;flex-wrap:wrap;\"]);\n_c4 = StyledItemChartWrapper;\nvar StyledConnectionStatusWrapper = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"ClusterChartItem__StyledConnectionStatusWrapper\",\n  componentId: \"sc-1upiinl-4\"\n})([\"position:absolute;display:flex;align-items:center;top:5px;right:5px;color:#fff;font-size:10px;user-select:none;z-index:1;cursor:zoom-in;&:hover{font-size:14px;}\"]);\n_c5 = StyledConnectionStatusWrapper;\nvar StyledConnectionStatus = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"ClusterChartItem__StyledConnectionStatus\",\n  componentId: \"sc-1upiinl-5\"\n})([\"width:10px;height:10px;border-radius:50%;margin-right:4px;\"]);\n_c6 = StyledConnectionStatus;\nvar CHART_X_SIZE = 50;\n\nvar settingAxios = function settingAxios(ip) {\n  var conn = axios.create({\n    baseURL: ip,\n    timeout: 10 * 1000\n  });\n  conn.interceptors.request.use(function (config) {\n    config.params = {\n      startTime: new Date()\n    };\n    return config;\n  }, function (error) {\n    return Promise.reject(error);\n  });\n  conn.interceptors.response.use(function (response) {\n    response.config.params.endTime = new Date();\n    response.config.params.duration = response.config.params.endTime - response.config.params.startTime;\n    return response;\n  }, function (error) {\n    error.config.params.endTime = new Date();\n    error.config.params.duration = error.config.params.endTime - error.config.params.startTime;\n    return Promise.reject(error);\n  });\n  return conn;\n};\n\nvar findTreeInNvidia = function findTreeInNvidia(jsonObject, search) {\n  var token = '>';\n\n  if (search.indexOf(token) < 0) {\n    return jsonObject[search];\n  } else {\n    var target = search.substr(0, search.indexOf(token));\n    var param = search.substr(search.indexOf(token) + token.length);\n\n    if (typeof jsonObject[target] === 'object') {\n      return findTreeInNvidia(jsonObject[target], param);\n    } else if (typeof jsonObject[target] === 'string') {\n      return jsonObject[target];\n    }\n  }\n\n  return undefined;\n};\n\nexport var ClusterChartItem = function ClusterChartItem(_ref) {\n  _s();\n\n  var name = _ref.name,\n      type = _ref.type,\n      ip = _ref.ip;\n  var conn = settingAxios(ip);\n\n  var _useState = useState(-1),\n      duration = _useState[0],\n      setDuration = _useState[1];\n\n  var _useState2 = useState(undefined),\n      result = _useState2[0],\n      setResult = _useState2[1];\n\n  var _useState3 = useState(-1),\n      latency = _useState3[0],\n      setLatency = _useState3[1];\n\n  var _useState4 = useState([]),\n      amdGpuList = _useState4[0],\n      setAmdGpuList = _useState4[1];\n\n  var _useState5 = useState([]),\n      gpuNameList = _useState5[0],\n      setGpuNameList = _useState5[1];\n\n  var _useState6 = useState([]),\n      chartData = _useState6[0],\n      setChartData = _useState6[1];\n\n  var envAMD = Setting.amd;\n  var envNVIDIA = Setting.nvidia;\n  useEffect(function () {\n    var unmount = false;\n\n    var onLoadApi = function onLoadApi() {\n      var url = type === 'amd' ? \"/\".concat(type, \"/api/min\") : \"/\".concat(type, \"/api\");\n      conn.get(url).then(function (response) {\n        if (unmount) return;\n        setDuration(response.config.params.duration);\n\n        if (response.status === 200) {\n          setLatency(response.data.commandDelay);\n\n          if (type === 'nvidia') {\n            if (response.data.error === 'ok') {\n              setResult(response.data.smiResult.nvidia_smi_log);\n            } else {\n              console.error(response.data.error);\n            }\n          } else if (type === 'amd') {\n            if (response.data.error === 'ok') {\n              setResult(response);\n\n              if (amdGpuList.length !== response.data.smiResult.length) {\n                setAmdGpuList(Object.keys(response.data.smiResult));\n              }\n            } else {\n              console.error(response.data.error);\n            }\n          }\n        } else {\n          setResult(undefined);\n        }\n      })[\"catch\"](function (error) {\n        if (unmount) return;\n        setDuration(-1);\n        console.log('error', error);\n      });\n    };\n\n    var interval = setInterval(function () {\n      onLoadApi();\n    }, 1000);\n    return function () {\n      unmount = true;\n      clearInterval(interval);\n    };\n  }, []); // for AMD\n\n  useEffect(function () {\n    if (type === 'amd' && amdGpuList.length > 0) {\n      if (result) {\n        setGpuNameList(amdGpuList.filter(function (device) {\n          return device !== 'system';\n        }).map(function (device) {\n          return result.data.smiResult[device][envAMD.deviceName];\n        }));\n      }\n\n      var tempArray = [];\n\n      if (chartData.length === 0) {\n        for (var n = 0; n < CHART_X_SIZE; n++) {\n          tempArray.push({\n            x: '',\n            value: envAMD.chartItem.map(function () {\n              return amdGpuList.map(function () {\n                return '0';\n              });\n            })\n          });\n        }\n\n        setChartData([].concat(tempArray));\n      }\n    }\n  }, [amdGpuList]);\n  useEffect(function () {\n    if (result) {\n      if (type === 'amd' && amdGpuList.length > 0 && chartData.length > 0) {\n        var data = result.data.smiResult;\n        var tempArray = chartData;\n        var tempValue = {\n          x: Util.getMMSS(),\n          value: envAMD.chartItem.map(function () {\n            return amdGpuList.map(function () {\n              return '0';\n            });\n          })\n        };\n        amdGpuList.forEach(function (device, deviceIndex) {\n          if (device === 'system') return;\n          envAMD.chartItem.forEach(function (el, idx) {\n            if (data[device][el] === undefined) {} else {\n              tempValue.value[idx][deviceIndex] = data[device][el];\n            }\n          });\n        });\n        if (tempArray.length >= CHART_X_SIZE) tempArray.shift();\n        tempArray.push(tempValue);\n        setChartData(tempArray);\n      }\n\n      if (type === 'nvidia') {\n        (function () {\n          var data = result.gpu;\n\n          if (chartData.length === 0) {\n            var _tempArray = [];\n\n            for (var n = 0; n < CHART_X_SIZE; n++) {\n              _tempArray.push({\n                x: '',\n                value: envNVIDIA.chartItem.map(function () {\n                  return data.map(function () {\n                    return '0';\n                  });\n                })\n              });\n            }\n\n            _tempArray[CHART_X_SIZE - 1] = {\n              x: Util.getMMSS(),\n              value: envNVIDIA.chartItem.map(function (itemTree) {\n                return data.map(function (_, deviceIndex) {\n                  return findTreeInNvidia(data[deviceIndex], itemTree);\n                });\n              })\n            };\n            setChartData([].concat(_tempArray));\n          } else {\n            var _tempArray2 = chartData;\n            var _tempValue = {\n              x: Util.getMMSS(),\n              value: envNVIDIA.chartItem.map(function (itemTree) {\n                return data.map(function (_, deviceIndex) {\n                  return findTreeInNvidia(data[deviceIndex], itemTree);\n                });\n              })\n            };\n            if (_tempArray2.length >= CHART_X_SIZE) _tempArray2.shift();\n\n            _tempArray2.push(_tempValue);\n\n            setChartData(_tempArray2);\n          }\n        })();\n      }\n    }\n  }, [result]);\n\n  var getOption = function getOption(data, envType, envTypeIndex) {\n    var parseValue = [];\n\n    if (type === 'amd') {\n      parseValue = amdGpuList.filter(function (device) {\n        return device !== 'system';\n      }).map(function (_, deviceIndex) {\n        var color = Util.colors[deviceIndex % Util.colors.length];\n        return {\n          name: gpuNameList[deviceIndex],\n          data: data.map(function (item) {\n            return parseInt(item.value[envTypeIndex][deviceIndex], 10);\n          }),\n          type: 'line',\n          showSymbol: false,\n          hoverAnimation: false,\n          itemStyle: {\n            color: color\n          },\n          symbol: 'circle',\n          symbolSize: 5,\n          areaStyle: {\n            opacity: 0.2,\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: color\n            }, {\n              offset: 1,\n              color: '#211510'\n            }])\n          }\n        };\n      });\n    }\n\n    if (type === 'nvidia') {\n      parseValue = result.gpu.map(function (device, deviceIndex) {\n        var color = Util.colors[deviceIndex % Util.colors.length];\n        return {\n          name: device[envNVIDIA.deviceName],\n          data: data.map(function (item) {\n            return parseInt(item.value[envTypeIndex][deviceIndex], 10);\n          }),\n          type: 'line',\n          showSymbol: false,\n          hoverAnimation: false,\n          itemStyle: {\n            color: color\n          },\n          symbol: 'circle',\n          symbolSize: 5,\n          areaStyle: {\n            opacity: 0.2,\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n              offset: 0,\n              color: color\n            }, {\n              offset: 1,\n              color: '#211510'\n            }])\n          }\n        };\n      });\n    }\n\n    return {\n      title: {\n        text: \"\".concat(envType),\n        textStyle: {\n          color: '#ccc',\n          fontSize: 11\n        }\n      },\n      grid: {\n        top: 35,\n        left: 30,\n        right: 10,\n        bottom: 30\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          animation: false\n        }\n      },\n      xAxis: {\n        type: 'category',\n        splitLine: {\n          show: false\n        },\n        axisLabel: {\n          color: '#aaa',\n          fontFamily: 'SpoqaHanSans-Regular'\n        },\n        axisLine: {\n          show: false\n        },\n        axisTick: {\n          show: false\n        },\n        data: data.map(function (item) {\n          return item.x;\n        })\n      },\n      yAxis: {\n        type: 'value',\n        boundaryGap: false,\n        splitLine: {\n          show: false\n        },\n        axisLabel: {\n          color: '#ddd',\n          fontFamily: 'SpoqaHanSans-Regular'\n        } // min: 'dataMin',\n        // max: 'dataMax'\n\n      },\n      series: parseValue\n    };\n  };\n\n  return __jsx(React.Fragment, null, __jsx(StyledItemWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }\n  }, __jsx(StyledItemTitle, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    className: 'upper',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 11\n    }\n  }, \"[\", type, \"]\"), name), __jsx(StyledItemLegendList, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }\n  }, type === 'nvidia' && result && result.gpu && result.gpu.length > 0 && result.gpu.map(function (device, deviceIndex) {\n    return __jsx(\"li\", {\n      key: deviceIndex,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      style: {\n        backgroundColor: Util.colors[deviceIndex % Util.colors.length],\n        width: '10px',\n        height: '10px',\n        borderRadius: '2px',\n        margin: '4px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 17\n      }\n    }), device[envNVIDIA.deviceName]);\n  }), type === 'amd' && gpuNameList.length > 0 && gpuNameList.map(function (gpuName, gpuNameIndex) {\n    return __jsx(\"li\", {\n      key: gpuNameIndex,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      style: {\n        backgroundColor: Util.colors[gpuNameIndex % Util.colors.length],\n        width: '10px',\n        height: '10px',\n        borderRadius: '2px',\n        margin: '4px'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 17\n      }\n    }), gpuName);\n  })), __jsx(StyledItemChartWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 9\n    }\n  }, type === 'nvidia' && chartData.length > 0 && envNVIDIA.chartItem.map(function (envType, envTypeIndex) {\n    return __jsx(Fragment, {\n      key: \"\".concat(name, \"-\").concat(type, \"-\").concat(envTypeIndex),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 15\n      }\n    }, __jsx(ReactEcharts, {\n      option: getOption(chartData, envType, envTypeIndex),\n      notMerge: true,\n      lazyUpdate: true,\n      style: {\n        height: '180px',\n        width: '200px'\n      } // opts={{ renderer: 'svg' }}\n      ,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 17\n      }\n    }));\n  }), type === 'amd' && result && result.data && chartData.length > 0 && envAMD.chartItem.map(function (envType, envTypeIndex) {\n    return __jsx(Fragment, {\n      key: \"\".concat(name, \"-\").concat(type, \"-\").concat(envTypeIndex),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 472,\n        columnNumber: 15\n      }\n    }, __jsx(ReactEcharts, {\n      option: getOption(chartData, envType, envTypeIndex),\n      notMerge: true,\n      lazyUpdate: true,\n      style: {\n        height: '180px',\n        width: '200px'\n      } // opts={{ renderer: 'svg' }}\n      ,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 17\n      }\n    }));\n  })), __jsx(StyledConnectionStatusWrapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 9\n    }\n  }, __jsx(StyledConnectionStatus, {\n    style: {\n      backgroundColor: duration === -1 ? 'red' : 'green'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 11\n    }\n  }), ' ', duration === -1 ? '' : \"\".concat(duration / 1000, \"s\"), \" (\", latency === -1 ? '' : \"\".concat(latency / 1000, \"s\"), \")\")));\n};\n\n_s(ClusterChartItem, \"+T9ZkdMkw7etAvg66FQ7/oYA9Gs=\");\n\n_c7 = ClusterChartItem;\nexport default ClusterChartItem;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"StyledItemWrapper\");\n$RefreshReg$(_c2, \"StyledItemTitle\");\n$RefreshReg$(_c3, \"StyledItemLegendList\");\n$RefreshReg$(_c4, \"StyledItemChartWrapper\");\n$RefreshReg$(_c5, \"StyledConnectionStatusWrapper\");\n$RefreshReg$(_c6, \"StyledConnectionStatus\");\n$RefreshReg$(_c7, \"ClusterChartItem\");","map":{"version":3,"sources":["C:/Users/shyuniz/Desktop/moreh/self-kubernetes/components/organisms/ClusterChartItem.tsx"],"names":["React","useEffect","useState","Fragment","axios","styled","ReactEcharts","echarts","Util","Setting","StyledItemWrapper","div","StyledItemTitle","StyledItemLegendList","ul","StyledItemChartWrapper","StyledConnectionStatusWrapper","StyledConnectionStatus","CHART_X_SIZE","settingAxios","ip","conn","create","baseURL","timeout","interceptors","request","use","config","params","startTime","Date","error","Promise","reject","response","endTime","duration","findTreeInNvidia","jsonObject","search","token","indexOf","target","substr","param","length","undefined","ClusterChartItem","name","type","setDuration","result","setResult","latency","setLatency","amdGpuList","setAmdGpuList","gpuNameList","setGpuNameList","chartData","setChartData","envAMD","amd","envNVIDIA","nvidia","unmount","onLoadApi","url","get","then","status","data","commandDelay","smiResult","nvidia_smi_log","console","Object","keys","log","interval","setInterval","clearInterval","filter","device","map","deviceName","tempArray","n","push","x","value","chartItem","tempValue","getMMSS","forEach","deviceIndex","el","idx","shift","gpu","itemTree","_","getOption","envType","envTypeIndex","parseValue","color","colors","item","parseInt","showSymbol","hoverAnimation","itemStyle","symbol","symbolSize","areaStyle","opacity","graphic","LinearGradient","offset","title","text","textStyle","fontSize","grid","top","left","right","bottom","tooltip","trigger","axisPointer","animation","xAxis","splitLine","show","axisLabel","fontFamily","axisLine","axisTick","yAxis","boundaryGap","series","backgroundColor","width","height","borderRadius","margin","gpuName","gpuNameIndex"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\r\nimport axios, { AxiosInstance } from 'axios';\r\nimport styled from 'styled-components';\r\nimport ReactEcharts from 'echarts-for-react';\r\nimport echarts from 'echarts';\r\n\r\nimport Util from '../../lib/utilMethods';\r\nimport Setting from '../../lib/setting.json';\r\n\r\nconst StyledItemWrapper = styled.div`\r\n  position: relative;\r\n  flex: 0 0 400px;\r\n  border: 1px solid #fff;\r\n  margin: 5px;\r\n  padding-top: 100px;\r\n`;\r\nconst StyledItemTitle = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  top: 5px;\r\n  left: 5px;\r\n  color: #fff;\r\n  font-size: 14px;\r\n  user-select: none;\r\n  & > .upper {\r\n    text-transform: uppercase;\r\n    margin-right: 5px;\r\n  }\r\n`;\r\nconst StyledItemLegendList = styled.ul`\r\n  position: absolute;\r\n  top: 35px;\r\n  left: 5px;\r\n  width: calc(400px - 10px);\r\n  max-height: 60px;\r\n  overflow-y: auto;\r\n  color: #fff;\r\n  font-size: 14px;\r\n  user-select: none;\r\n  border-top: 1px solid #ccc;\r\n  border-bottom: 1px solid #ccc;\r\n  & > li {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\nconst StyledItemChartWrapper = styled.div`\r\n  width: 400px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\nconst StyledConnectionStatusWrapper = styled.div`\r\n  position: absolute;\r\n  display: flex;\r\n  align-items: center;\r\n  top: 5px;\r\n  right: 5px;\r\n  color: #fff;\r\n  font-size: 10px;\r\n  user-select: none;\r\n  z-index: 1;\r\n  cursor: zoom-in;\r\n  &:hover {\r\n    font-size: 14px;\r\n  }\r\n`;\r\nconst StyledConnectionStatus = styled.div`\r\n  width: 10px;\r\n  height: 10px;\r\n  border-radius: 50%;\r\n  margin-right: 4px;\r\n`;\r\n\r\nconst CHART_X_SIZE = 50;\r\ntype chartProps = {\r\n  x: string;\r\n  value: string[][];\r\n};\r\n\r\nexport type ClusterChartItemProps = {\r\n  /**\r\n   * Node name\r\n   */\r\n  name: string;\r\n  /**\r\n   * Node type\r\n   */\r\n  type: string; // 'amd' | 'nvidia'\r\n  /**\r\n   * Node IP\r\n   */\r\n  ip: string;\r\n};\r\n\r\nconst settingAxios = (ip: string): AxiosInstance => {\r\n  const conn = axios.create({\r\n    baseURL: ip,\r\n    timeout: 10 * 1000\r\n  });\r\n\r\n  conn.interceptors.request.use(\r\n    (config) => {\r\n      config.params = { startTime: new Date() };\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  conn.interceptors.response.use(\r\n    (response) => {\r\n      response.config.params.endTime = new Date();\r\n      response.config.params.duration = response.config.params.endTime - response.config.params.startTime;\r\n      return response;\r\n    },\r\n    (error) => {\r\n      error.config.params.endTime = new Date();\r\n      error.config.params.duration = error.config.params.endTime - error.config.params.startTime;\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\n  return conn;\r\n};\r\n\r\nconst findTreeInNvidia = (jsonObject: any, search: string) => {\r\n  const token = '>';\r\n  if (search.indexOf(token) < 0) {\r\n    return jsonObject[search];\r\n  } else {\r\n    const target = search.substr(0, search.indexOf(token));\r\n    const param = search.substr(search.indexOf(token) + token.length);\r\n    if (typeof jsonObject[target] === 'object') {\r\n      return findTreeInNvidia(jsonObject[target], param);\r\n    } else if (typeof jsonObject[target] === 'string') {\r\n      return jsonObject[target];\r\n    }\r\n  }\r\n  return undefined;\r\n};\r\n\r\nexport const ClusterChartItem: React.FC<ClusterChartItemProps> = ({ name, type, ip }) => {\r\n  const conn = settingAxios(ip);\r\n  const [duration, setDuration] = useState<number>(-1);\r\n  const [result, setResult] = useState<any>(undefined);\r\n  const [latency, setLatency] = useState<number>(-1);\r\n  const [amdGpuList, setAmdGpuList] = useState<string[]>([]);\r\n  const [gpuNameList, setGpuNameList] = useState<string[]>([]);\r\n  const [chartData, setChartData] = useState<chartProps[]>([]);\r\n\r\n  const envAMD = Setting.amd;\r\n  const envNVIDIA = Setting.nvidia;\r\n\r\n  useEffect(() => {\r\n    let unmount = false;\r\n    const onLoadApi = () => {\r\n      const url = type === 'amd' ? `/${type}/api/min` : `/${type}/api`;\r\n      conn\r\n        .get(url)\r\n        .then((response) => {\r\n          if (unmount) return;\r\n\r\n          setDuration(response.config.params.duration);\r\n\r\n          if (response.status === 200) {\r\n            setLatency(response.data.commandDelay);\r\n\r\n            if (type === 'nvidia') {\r\n              if (response.data.error === 'ok') {\r\n                setResult(response.data.smiResult.nvidia_smi_log);\r\n              } else {\r\n                console.error(response.data.error);\r\n              }\r\n            } else if (type === 'amd') {\r\n              if (response.data.error === 'ok') {\r\n                setResult(response);\r\n                if (amdGpuList.length !== response.data.smiResult.length) {\r\n                  setAmdGpuList(Object.keys(response.data.smiResult));\r\n                }\r\n              } else {\r\n                console.error(response.data.error);\r\n              }\r\n            }\r\n          } else {\r\n            setResult(undefined);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (unmount) return;\r\n          setDuration(-1);\r\n          console.log('error', error);\r\n        });\r\n    };\r\n\r\n    const interval = setInterval(() => {\r\n      onLoadApi();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      unmount = true;\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  // for AMD\r\n  useEffect(() => {\r\n    if (type === 'amd' && amdGpuList.length > 0) {\r\n      if (result) {\r\n        setGpuNameList(\r\n          amdGpuList\r\n            .filter((device) => device !== 'system')\r\n            .map((device) => result.data.smiResult[device][envAMD.deviceName])\r\n        );\r\n      }\r\n      const tempArray: chartProps[] = [];\r\n      if (chartData.length === 0) {\r\n        for (let n = 0; n < CHART_X_SIZE; n++) {\r\n          tempArray.push({\r\n            x: '',\r\n            value: envAMD.chartItem.map(() => amdGpuList.map(() => '0'))\r\n          });\r\n        }\r\n        setChartData([...tempArray]);\r\n      }\r\n    }\r\n  }, [amdGpuList]);\r\n\r\n  useEffect(() => {\r\n    if (result) {\r\n      if (type === 'amd' && amdGpuList.length > 0 && chartData.length > 0) {\r\n        const data = result.data.smiResult;\r\n\r\n        const tempArray = chartData;\r\n        const tempValue: chartProps = {\r\n          x: Util.getMMSS(),\r\n          value: envAMD.chartItem.map(() => amdGpuList.map(() => '0'))\r\n        };\r\n        amdGpuList.forEach((device, deviceIndex) => {\r\n          if (device === 'system') return;\r\n\r\n          envAMD.chartItem.forEach((el, idx) => {\r\n            if (data[device][el] === undefined) {\r\n            } else {\r\n              tempValue.value[idx][deviceIndex] = data[device][el];\r\n            }\r\n          });\r\n        });\r\n        if (tempArray.length >= CHART_X_SIZE) tempArray.shift();\r\n        tempArray.push(tempValue);\r\n        setChartData(tempArray);\r\n      }\r\n      if (type === 'nvidia') {\r\n        const data = result.gpu;\r\n\r\n        if (chartData.length === 0) {\r\n          const tempArray: chartProps[] = [];\r\n          for (let n = 0; n < CHART_X_SIZE; n++) {\r\n            tempArray.push({\r\n              x: '',\r\n              value: envNVIDIA.chartItem.map(() => data.map(() => '0'))\r\n            });\r\n          }\r\n          tempArray[CHART_X_SIZE - 1] = {\r\n            x: Util.getMMSS(),\r\n            value: envNVIDIA.chartItem.map((itemTree) => {\r\n              return data.map((_, deviceIndex) => {\r\n                return findTreeInNvidia(data[deviceIndex], itemTree);\r\n              });\r\n            })\r\n          };\r\n          setChartData([...tempArray]);\r\n        } else {\r\n          const tempArray = chartData;\r\n          const tempValue: chartProps = {\r\n            x: Util.getMMSS(),\r\n            value: envNVIDIA.chartItem.map((itemTree) => {\r\n              return data.map((_, deviceIndex) => {\r\n                return findTreeInNvidia(data[deviceIndex], itemTree);\r\n              });\r\n            })\r\n          };\r\n          if (tempArray.length >= CHART_X_SIZE) tempArray.shift();\r\n          tempArray.push(tempValue);\r\n          setChartData(tempArray);\r\n        }\r\n      }\r\n    }\r\n  }, [result]);\r\n\r\n  const getOption = (data: chartProps[], envType: string, envTypeIndex: number) => {\r\n    let parseValue = [];\r\n    if (type === 'amd') {\r\n      parseValue = amdGpuList\r\n        .filter((device) => device !== 'system')\r\n        .map((_, deviceIndex) => {\r\n          const color = Util.colors[deviceIndex % Util.colors.length];\r\n          return {\r\n            name: gpuNameList[deviceIndex],\r\n            data: data.map((item) => parseInt(item.value[envTypeIndex][deviceIndex], 10)),\r\n            type: 'line',\r\n            showSymbol: false,\r\n            hoverAnimation: false,\r\n            itemStyle: {\r\n              color: color\r\n            },\r\n            symbol: 'circle',\r\n            symbolSize: 5,\r\n            areaStyle: {\r\n              opacity: 0.2,\r\n              color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n                {\r\n                  offset: 0,\r\n                  color: color\r\n                },\r\n                {\r\n                  offset: 1,\r\n                  color: '#211510'\r\n                }\r\n              ])\r\n            }\r\n          };\r\n        });\r\n    }\r\n    if (type === 'nvidia') {\r\n      parseValue = result.gpu.map((device, deviceIndex) => {\r\n        const color = Util.colors[deviceIndex % Util.colors.length];\r\n        return {\r\n          name: device[envNVIDIA.deviceName],\r\n          data: data.map((item) => parseInt(item.value[envTypeIndex][deviceIndex], 10)),\r\n          type: 'line',\r\n          showSymbol: false,\r\n          hoverAnimation: false,\r\n          itemStyle: {\r\n            color: color\r\n          },\r\n          symbol: 'circle',\r\n          symbolSize: 5,\r\n          areaStyle: {\r\n            opacity: 0.2,\r\n            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\r\n              {\r\n                offset: 0,\r\n                color: color\r\n              },\r\n              {\r\n                offset: 1,\r\n                color: '#211510'\r\n              }\r\n            ])\r\n          }\r\n        };\r\n      });\r\n    }\r\n    return {\r\n      title: {\r\n        text: `${envType}`,\r\n        textStyle: {\r\n          color: '#ccc',\r\n          fontSize: 11\r\n        }\r\n      },\r\n      grid: {\r\n        top: 35,\r\n        left: 30,\r\n        right: 10,\r\n        bottom: 30\r\n      },\r\n      tooltip: {\r\n        trigger: 'axis',\r\n        axisPointer: {\r\n          animation: false\r\n        }\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        splitLine: {\r\n          show: false\r\n        },\r\n        axisLabel: {\r\n          color: '#aaa',\r\n          fontFamily: 'SpoqaHanSans-Regular'\r\n        },\r\n        axisLine: {\r\n          show: false\r\n        },\r\n        axisTick: {\r\n          show: false\r\n        },\r\n        data: data.map((item) => item.x)\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        boundaryGap: false,\r\n        splitLine: {\r\n          show: false\r\n        },\r\n        axisLabel: {\r\n          color: '#ddd',\r\n          fontFamily: 'SpoqaHanSans-Regular'\r\n        }\r\n        // min: 'dataMin',\r\n        // max: 'dataMax'\r\n      },\r\n      series: parseValue\r\n    };\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <StyledItemWrapper>\r\n        <StyledItemTitle>\r\n          <span className={'upper'}>[{type}]</span>\r\n          {name}\r\n        </StyledItemTitle>\r\n        <StyledItemLegendList>\r\n          {type === 'nvidia' &&\r\n            result &&\r\n            result.gpu &&\r\n            result.gpu.length > 0 &&\r\n            result.gpu.map((device, deviceIndex) => (\r\n              <li key={deviceIndex}>\r\n                <div\r\n                  style={{\r\n                    backgroundColor: Util.colors[deviceIndex % Util.colors.length],\r\n                    width: '10px',\r\n                    height: '10px',\r\n                    borderRadius: '2px',\r\n                    margin: '4px'\r\n                  }}\r\n                ></div>\r\n                {device[envNVIDIA.deviceName]}\r\n              </li>\r\n            ))}\r\n          {type === 'amd' &&\r\n            gpuNameList.length > 0 &&\r\n            gpuNameList.map((gpuName, gpuNameIndex) => (\r\n              <li key={gpuNameIndex}>\r\n                <div\r\n                  style={{\r\n                    backgroundColor: Util.colors[gpuNameIndex % Util.colors.length],\r\n                    width: '10px',\r\n                    height: '10px',\r\n                    borderRadius: '2px',\r\n                    margin: '4px'\r\n                  }}\r\n                ></div>\r\n                {gpuName}\r\n              </li>\r\n            ))}\r\n        </StyledItemLegendList>\r\n        <StyledItemChartWrapper>\r\n          {type === 'nvidia' &&\r\n            chartData.length > 0 &&\r\n            envNVIDIA.chartItem.map((envType, envTypeIndex) => (\r\n              <Fragment key={`${name}-${type}-${envTypeIndex}`}>\r\n                <ReactEcharts\r\n                  option={getOption(chartData, envType, envTypeIndex)}\r\n                  notMerge={true}\r\n                  lazyUpdate={true}\r\n                  style={{ height: '180px', width: '200px' }}\r\n                  // opts={{ renderer: 'svg' }}\r\n                />\r\n              </Fragment>\r\n            ))}\r\n          {type === 'amd' &&\r\n            result &&\r\n            result.data &&\r\n            chartData.length > 0 &&\r\n            envAMD.chartItem.map((envType, envTypeIndex) => (\r\n              <Fragment key={`${name}-${type}-${envTypeIndex}`}>\r\n                <ReactEcharts\r\n                  option={getOption(chartData, envType, envTypeIndex)}\r\n                  notMerge={true}\r\n                  lazyUpdate={true}\r\n                  style={{ height: '180px', width: '200px' }}\r\n                  // opts={{ renderer: 'svg' }}\r\n                />\r\n              </Fragment>\r\n            ))}\r\n        </StyledItemChartWrapper>\r\n        <StyledConnectionStatusWrapper>\r\n          <StyledConnectionStatus\r\n            style={{\r\n              backgroundColor: duration === -1 ? 'red' : 'green'\r\n            }}\r\n          ></StyledConnectionStatus>{' '}\r\n          {duration === -1 ? '' : `${duration / 1000}s`} ({latency === -1 ? '' : `${latency / 1000}s`})\r\n        </StyledConnectionStatusWrapper>\r\n      </StyledItemWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ClusterChartItem;\r\n"]},"metadata":{},"sourceType":"module"}