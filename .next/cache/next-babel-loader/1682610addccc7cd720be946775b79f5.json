{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shyuniz\\\\Desktop\\\\moreh\\\\self-kubernetes\\\\components\\\\organisms\\\\ClusterModnn.tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from 'react';\nimport axios from 'axios';\nimport styled from 'styled-components';\nimport Panel from '../atoms/Panel';\nimport ModnnConfig from '../../lib/setting.json';\nconst marginCW = 10;\nconst StyledClusterWrapper = /*#__PURE__*/styled.section.withConfig({\n  displayName: \"ClusterModnn__StyledClusterWrapper\",\n  componentId: \"sc-67wgkp-0\"\n})([\"width:calc(100% - \", \"px);margin:0 \", \"px 30px;&:last-child{margin-bottom:5px;}\"], marginCW * 2, marginCW);\nconst StyledClusterItemWrapper = /*#__PURE__*/styled.article.withConfig({\n  displayName: \"ClusterModnn__StyledClusterItemWrapper\",\n  componentId: \"sc-67wgkp-1\"\n})([\"display:flex;flex-wrap:wrap;\"]);\n\nconst customStyles = selectType => {\n  return {\n    option: (provided, state) => _objectSpread(_objectSpread({}, provided), {}, {\n      borderBottom: '1px dotted pink',\n      color: state.isSelected ? '#999' : '#333'\n    }),\n    container: provided => _objectSpread(_objectSpread({}, provided), {}, {\n      width: selectType === 'fil' ? '300px' : '100px',\n      marginLeft: '10px'\n    })\n  };\n};\n\nconst conn = axios.create({\n  baseURL: ModnnConfig.modnn.ip,\n  timeout: 10 * 1000\n});\nexport const ClusterModnn = () => {\n  useEffect(() => {\n    let unmount = false;\n\n    const onLoadApi = () => {\n      conn.get('/modnn').then(response => {\n        if (unmount) return;\n        console.log(response);\n\n        if (response.status === 200) {// set\n        } else {// setResult(undefined);\n          }\n      }).catch(error => {\n        if (unmount) return;\n        console.log('error', error);\n      });\n    };\n\n    const interval = setInterval(() => {\n      onLoadApi();\n    }, 1000);\n    return () => {\n      unmount = true;\n      clearInterval(interval);\n    };\n  }, []);\n  return __jsx(Panel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 10\n    }\n  }, \"TEST\");\n};\nexport default ClusterModnn;","map":{"version":3,"sources":["C:/Users/shyuniz/Desktop/moreh/self-kubernetes/components/organisms/ClusterModnn.tsx"],"names":["React","useEffect","axios","styled","Panel","ModnnConfig","marginCW","StyledClusterWrapper","section","StyledClusterItemWrapper","article","customStyles","selectType","option","provided","state","borderBottom","color","isSelected","container","width","marginLeft","conn","create","baseURL","modnn","ip","timeout","ClusterModnn","unmount","onLoadApi","get","then","response","console","log","status","catch","error","interval","setInterval","clearInterval"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAA0BC,SAA1B,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,QAAQ,GAAG,EAAjB;AACA,MAAMC,oBAAoB,gBAAGJ,MAAM,CAACK,OAAV;AAAA;AAAA;AAAA,wFACHF,QAAQ,GAAG,CADR,EAEZA,QAFY,CAA1B;AAQA,MAAMG,wBAAwB,gBAAGN,MAAM,CAACO,OAAV;AAAA;AAAA;AAAA,oCAA9B;;AAKA,MAAMC,YAAY,GAAIC,UAAD,IAAwB;AAC3C,SAAO;AACLC,IAAAA,MAAM,EAAE,CAACC,QAAD,EAAgBC,KAAhB,qCACHD,QADG;AAENE,MAAAA,YAAY,EAAE,iBAFR;AAGNC,MAAAA,KAAK,EAAEF,KAAK,CAACG,UAAN,GAAmB,MAAnB,GAA4B;AAH7B,MADH;AAMLC,IAAAA,SAAS,EAAGL,QAAD,oCACNA,QADM;AAETM,MAAAA,KAAK,EAAER,UAAU,KAAK,KAAf,GAAuB,OAAvB,GAAiC,OAF/B;AAGTS,MAAAA,UAAU,EAAE;AAHH;AANN,GAAP;AAYD,CAbD;;AAeA,MAAMC,IAAI,GAAGpB,KAAK,CAACqB,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAEnB,WAAW,CAACoB,KAAZ,CAAkBC,EADH;AAExBC,EAAAA,OAAO,EAAE,KAAK;AAFU,CAAb,CAAb;AAKA,OAAO,MAAMC,YAAsB,GAAG,MAAM;AAC1C3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI4B,OAAO,GAAG,KAAd;;AACA,UAAMC,SAAS,GAAG,MAAM;AACtBR,MAAAA,IAAI,CACDS,GADH,CACO,QADP,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,YAAIJ,OAAJ,EAAa;AACbK,QAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,YAAIA,QAAQ,CAACG,MAAT,KAAoB,GAAxB,EAA6B,CAC3B;AACD,SAFD,MAEO,CACL;AACD;AACF,OAVH,EAWGC,KAXH,CAWUC,KAAD,IAAW;AAChB,YAAIT,OAAJ,EAAa;AACbK,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,KAArB;AACD,OAdH;AAeD,KAhBD;;AAkBA,UAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCV,MAAAA,SAAS;AACV,KAF2B,EAEzB,IAFyB,CAA5B;AAIA,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,IAAV;AACAY,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD,KAHD;AAID,GA5BQ,EA4BN,EA5BM,CAAT;AA8BA,SAAO,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,CAhCM;AAkCP,eAAeX,YAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nimport Panel from '../atoms/Panel';\r\n\r\nimport ModnnConfig from '../../lib/setting.json';\r\n\r\nconst marginCW = 10;\r\nconst StyledClusterWrapper = styled.section`\r\n  width: calc(100% - ${marginCW * 2}px);\r\n  margin: 0 ${marginCW}px 30px;\r\n\r\n  &:last-child {\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\nconst StyledClusterItemWrapper = styled.article`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst customStyles = (selectType: string) => {\r\n  return {\r\n    option: (provided: any, state: { isSelected: any }) => ({\r\n      ...provided,\r\n      borderBottom: '1px dotted pink',\r\n      color: state.isSelected ? '#999' : '#333'\r\n    }),\r\n    container: (provided: any) => ({\r\n      ...provided,\r\n      width: selectType === 'fil' ? '300px' : '100px',\r\n      marginLeft: '10px'\r\n    })\r\n  };\r\n};\r\n\r\nconst conn = axios.create({\r\n  baseURL: ModnnConfig.modnn.ip,\r\n  timeout: 10 * 1000\r\n});\r\n\r\nexport const ClusterModnn: React.FC = () => {\r\n  useEffect(() => {\r\n    let unmount = false;\r\n    const onLoadApi = () => {\r\n      conn\r\n        .get('/modnn')\r\n        .then((response) => {\r\n          if (unmount) return;\r\n          console.log(response);\r\n          if (response.status === 200) {\r\n            // set\r\n          } else {\r\n            // setResult(undefined);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (unmount) return;\r\n          console.log('error', error);\r\n        });\r\n    };\r\n\r\n    const interval = setInterval(() => {\r\n      onLoadApi();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      unmount = true;\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return <Panel>TEST</Panel>;\r\n};\r\n\r\nexport default ClusterModnn;\r\n"]},"metadata":{},"sourceType":"module"}