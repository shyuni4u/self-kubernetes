{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var DASHBOARD_INFO_SET = 'DASHBOARD-INFO/SET';\nexport var initialState = {\n  nvidia: {\n    realtime: ['gpu_temp', 'gpu_temp_max_threshold', 'gpu_temp_slow_threshold', 'gpu_util', 'memory_util', 'encoder_util', 'decoder_util'],\n    ignore: ['ecc_errors', 'ibmnpu', 'gpu_virtualization_mode', 'gpu_operation_mode', 'inforom_version', 'board_id', 'performance_state', 'fan_speed', 'accounted_processes', 'driver_model', 'accounting_mode_buffer_size', 'accounting_mode', 'display_active', 'display_mode', 'product_brand', 'multigpu_board', 'minor_number', 'gpu_part_number', 'compute_mode', 'ecc_mode', 'clock_policy', 'max_customer_boost_clocks', 'clocks_throttle_reasons', 'bar1_memory_usage', 'encoder_stats', 'fbc_stats', 'retired_pages', 'power_management', 'power_state', 'default_power_limit', 'enforced_power_limit', 'min_power_limit', 'max_power_limit', 'video_clock', 'graphics_clock', 'applications_clocks', 'default_applications_clocks', 'max_clocks', 'supported_clocks']\n  },\n  amd: {\n    realtime: ['Average Graphics Package Power (W)', 'Temperature (Sensor edge) (C)', 'Temperature (Sensor junction) (C)', 'Temperature (Sensor mem) (C)', 'For Manual'],\n    ignore: ['RLC SRLG firmware version', 'RLC SRLS firmware version', 'SDMA firmware version', 'SDMA2 firmware version', 'SMC firmware version', 'SOS firmware version', 'RLC SRLC firmware version', 'RLC firmware version', 'PFP firmware version', 'MEC2 firmware version', 'MEC firmware version', 'ME firmware version', 'MC firmware version', 'DMCU firmware version', 'CE firmware version', 'ASD firmware version', 'TA RAS firmware version', 'TA XGMI firmware version', 'UVD firmware version', 'VCE firmware version', 'VCN firmware version']\n  }\n};\nexport var setDashboardIfno = function setDashboardIfno(obj) {\n  return {\n    type: DASHBOARD_INFO_SET,\n    nvidia: {\n      realtime: obj.nvidia.realtime,\n      ignore: obj.nvidia.ignore\n    },\n    amd: {\n      realtime: obj.amd.realtime,\n      ignore: obj.amd.ignore\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case DASHBOARD_INFO_SET:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        nvidia: {\n          realtime: action.nvidia.realtime,\n          ignore: action.nvidia.ignore\n        },\n        amd: {\n          realtime: action.amd.realtime,\n          ignore: action.amd.ignore\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/shyuniz/Desktop/moreh/self-kubernetes/modules/dashboardInfo.tsx"],"names":["DASHBOARD_INFO_SET","initialState","nvidia","realtime","ignore","amd","setDashboardIfno","obj","type","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,IAAMA,kBAAkB,GAAG,oBAA3B;AAaP,OAAO,IAAMC,YAAgC,GAAG;AAC9CC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,CACR,UADQ,EAER,wBAFQ,EAGR,yBAHQ,EAIR,UAJQ,EAKR,aALQ,EAMR,cANQ,EAOR,cAPQ,CADJ;AAUNC,IAAAA,MAAM,EAAE,CACN,YADM,EAEN,QAFM,EAGN,yBAHM,EAIN,oBAJM,EAKN,iBALM,EAMN,UANM,EAON,mBAPM,EAQN,WARM,EASN,qBATM,EAUN,cAVM,EAWN,6BAXM,EAYN,iBAZM,EAaN,gBAbM,EAcN,cAdM,EAeN,eAfM,EAgBN,gBAhBM,EAiBN,cAjBM,EAkBN,iBAlBM,EAmBN,cAnBM,EAoBN,UApBM,EAqBN,cArBM,EAsBN,2BAtBM,EAuBN,yBAvBM,EAwBN,mBAxBM,EAyBN,eAzBM,EA0BN,WA1BM,EA2BN,eA3BM,EA4BN,kBA5BM,EA6BN,aA7BM,EA8BN,qBA9BM,EA+BN,sBA/BM,EAgCN,iBAhCM,EAiCN,iBAjCM,EAkCN,aAlCM,EAmCN,gBAnCM,EAoCN,qBApCM,EAqCN,6BArCM,EAsCN,YAtCM,EAuCN,kBAvCM;AAVF,GADsC;AAqD9CC,EAAAA,GAAG,EAAE;AACHF,IAAAA,QAAQ,EAAE,CACR,oCADQ,EAER,+BAFQ,EAGR,mCAHQ,EAIR,8BAJQ,EAKR,YALQ,CADP;AAQHC,IAAAA,MAAM,EAAE,CACN,2BADM,EAEN,2BAFM,EAGN,uBAHM,EAIN,wBAJM,EAKN,sBALM,EAMN,sBANM,EAON,2BAPM,EAQN,sBARM,EASN,sBATM,EAUN,uBAVM,EAWN,sBAXM,EAYN,qBAZM,EAaN,qBAbM,EAcN,uBAdM,EAeN,qBAfM,EAgBN,sBAhBM,EAiBN,yBAjBM,EAkBN,0BAlBM,EAmBN,sBAnBM,EAoBN,sBApBM,EAqBN,sBArBM;AARL;AArDyC,CAAzC;AAuFP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD;AAAA,SAA8B;AAC5DC,IAAAA,IAAI,EAAER,kBADsD;AAE5DE,IAAAA,MAAM,EAAE;AACNC,MAAAA,QAAQ,EAAEI,GAAG,CAACL,MAAJ,CAAWC,QADf;AAENC,MAAAA,MAAM,EAAEG,GAAG,CAACL,MAAJ,CAAWE;AAFb,KAFoD;AAM5DC,IAAAA,GAAG,EAAE;AACHF,MAAAA,QAAQ,EAAEI,GAAG,CAACF,GAAJ,CAAQF,QADf;AAEHC,MAAAA,MAAM,EAAEG,GAAG,CAACF,GAAJ,CAAQD;AAFb;AANuD,GAA9B;AAAA,CAAzB;;AAgBP,IAAMK,OAAO,GAAG,SAAVA,OAAU,GAA+F;AAAA,MAA9FC,KAA8F,uEAAlET,YAAkE;AAAA,MAApDU,MAAoD;;AAC7G,UAAQA,MAAM,CAACH,IAAf;AACE,SAAKR,kBAAL;AACE,6CACKU,KADL;AAEER,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAEQ,MAAM,CAACT,MAAP,CAAcC,QADlB;AAENC,UAAAA,MAAM,EAAEO,MAAM,CAACT,MAAP,CAAcE;AAFhB,SAFV;AAMEC,QAAAA,GAAG,EAAE;AACHF,UAAAA,QAAQ,EAAEQ,MAAM,CAACN,GAAP,CAAWF,QADlB;AAEHC,UAAAA,MAAM,EAAEO,MAAM,CAACN,GAAP,CAAWD;AAFhB;AANP;;AAWF;AACE,aAAOM,KAAP;AAdJ;AAgBD,CAjBD;;AAmBA,eAAeD,OAAf","sourcesContent":["export const DASHBOARD_INFO_SET = 'DASHBOARD-INFO/SET';\r\n\r\nexport type dashboardInfoState = {\r\n  nvidia: {\r\n    realtime: Array<string>;\r\n    ignore: Array<string>;\r\n  };\r\n  amd: {\r\n    realtime: Array<string>;\r\n    ignore: Array<string>;\r\n  };\r\n};\r\n\r\nexport const initialState: dashboardInfoState = {\r\n  nvidia: {\r\n    realtime: [\r\n      'gpu_temp',\r\n      'gpu_temp_max_threshold',\r\n      'gpu_temp_slow_threshold',\r\n      'gpu_util',\r\n      'memory_util',\r\n      'encoder_util',\r\n      'decoder_util'\r\n    ],\r\n    ignore: [\r\n      'ecc_errors',\r\n      'ibmnpu',\r\n      'gpu_virtualization_mode',\r\n      'gpu_operation_mode',\r\n      'inforom_version',\r\n      'board_id',\r\n      'performance_state',\r\n      'fan_speed',\r\n      'accounted_processes',\r\n      'driver_model',\r\n      'accounting_mode_buffer_size',\r\n      'accounting_mode',\r\n      'display_active',\r\n      'display_mode',\r\n      'product_brand',\r\n      'multigpu_board',\r\n      'minor_number',\r\n      'gpu_part_number',\r\n      'compute_mode',\r\n      'ecc_mode',\r\n      'clock_policy',\r\n      'max_customer_boost_clocks',\r\n      'clocks_throttle_reasons',\r\n      'bar1_memory_usage',\r\n      'encoder_stats',\r\n      'fbc_stats',\r\n      'retired_pages',\r\n      'power_management',\r\n      'power_state',\r\n      'default_power_limit',\r\n      'enforced_power_limit',\r\n      'min_power_limit',\r\n      'max_power_limit',\r\n      'video_clock',\r\n      'graphics_clock',\r\n      'applications_clocks',\r\n      'default_applications_clocks',\r\n      'max_clocks',\r\n      'supported_clocks'\r\n    ]\r\n  },\r\n  amd: {\r\n    realtime: [\r\n      'Average Graphics Package Power (W)',\r\n      'Temperature (Sensor edge) (C)',\r\n      'Temperature (Sensor junction) (C)',\r\n      'Temperature (Sensor mem) (C)',\r\n      'For Manual'\r\n    ],\r\n    ignore: [\r\n      'RLC SRLG firmware version',\r\n      'RLC SRLS firmware version',\r\n      'SDMA firmware version',\r\n      'SDMA2 firmware version',\r\n      'SMC firmware version',\r\n      'SOS firmware version',\r\n      'RLC SRLC firmware version',\r\n      'RLC firmware version',\r\n      'PFP firmware version',\r\n      'MEC2 firmware version',\r\n      'MEC firmware version',\r\n      'ME firmware version',\r\n      'MC firmware version',\r\n      'DMCU firmware version',\r\n      'CE firmware version',\r\n      'ASD firmware version',\r\n      'TA RAS firmware version',\r\n      'TA XGMI firmware version',\r\n      'UVD firmware version',\r\n      'VCE firmware version',\r\n      'VCN firmware version'\r\n    ]\r\n  }\r\n};\r\n\r\nexport const setDashboardIfno = (obj: dashboardInfoState) => ({\r\n  type: DASHBOARD_INFO_SET,\r\n  nvidia: {\r\n    realtime: obj.nvidia.realtime,\r\n    ignore: obj.nvidia.ignore\r\n  },\r\n  amd: {\r\n    realtime: obj.amd.realtime,\r\n    ignore: obj.amd.ignore\r\n  }\r\n});\r\n\r\ntype actions = {\r\n  type: string;\r\n} & dashboardInfoState;\r\n\r\nconst reducer = (state: dashboardInfoState = initialState, action: actions): dashboardInfoState | undefined => {\r\n  switch (action.type) {\r\n    case DASHBOARD_INFO_SET:\r\n      return {\r\n        ...state,\r\n        nvidia: {\r\n          realtime: action.nvidia.realtime,\r\n          ignore: action.nvidia.ignore\r\n        },\r\n        amd: {\r\n          realtime: action.amd.realtime,\r\n          ignore: action.amd.ignore\r\n        }\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}