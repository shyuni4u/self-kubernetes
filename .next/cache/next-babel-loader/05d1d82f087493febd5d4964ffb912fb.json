{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var COUNT_PLUS = 'COUNT_PLUS';\nexport var COUNT_MINUS = 'COUNT_MINUS';\nexport var COUNT_SET = 'COUNT_SET';\nexport var initialState = {\n  count: 0\n};\nexport var countPlusAction = function countPlusAction() {\n  return {\n    type: COUNT_PLUS\n  };\n};\nexport var countMinusAction = function countMinusAction() {\n  return {\n    type: COUNT_MINUS\n  };\n};\nexport var setCountAction = function setCountAction(value) {\n  return {\n    type: COUNT_SET,\n    count: value\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case COUNT_PLUS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + 1\n      });\n\n    case COUNT_MINUS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count - 1\n      });\n\n    case COUNT_SET:\n      var count = action.count;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: count\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/shyuniz/Desktop/moreh/self-kubernetes/modules/count.tsx"],"names":["COUNT_PLUS","COUNT_MINUS","COUNT_SET","initialState","count","countPlusAction","type","countMinusAction","setCountAction","value","reducer","state","action"],"mappings":";;;;;;AAAA,OAAO,IAAMA,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,WAAW,GAAG,aAApB;AACP,OAAO,IAAMC,SAAS,GAAG,WAAlB;AAMP,OAAO,IAAMC,YAAwB,GAAG;AACtCC,EAAAA,KAAK,EAAE;AAD+B,CAAjC;AAIP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,SAAO;AACpCC,IAAAA,IAAI,EAAEN;AAD8B,GAAP;AAAA,CAAxB;AAIP,OAAO,IAAMO,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,SAAO;AACrCD,IAAAA,IAAI,EAAEL;AAD+B,GAAP;AAAA,CAAzB;AAIP,OAAO,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SAAoB;AAChDH,IAAAA,IAAI,EAAEJ,SAD0C;AAEhDE,IAAAA,KAAK,EAAEK;AAFyC,GAApB;AAAA,CAAvB;;AASP,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAA+E;AAAA,MAA9EC,KAA8E,uEAA1DR,YAA0D;AAAA,MAA5CS,MAA4C;;AAC7F,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKN,UAAL;AACE,6CACKW,KADL;AAEEP,QAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,GAAc;AAFvB;;AAIF,SAAKH,WAAL;AACE,6CACKU,KADL;AAEEP,QAAAA,KAAK,EAAEO,KAAK,CAACP,KAAN,GAAc;AAFvB;;AAIF,SAAKF,SAAL;AAAA,UACUE,KADV,GACoBQ,MADpB,CACUR,KADV;AAEE,6CACKO,KADL;AAEEP,QAAAA,KAAK,EAAEA;AAFT;;AAIF;AACE,aAAOO,KAAP;AAlBJ;AAoBD,CArBD;;AAuBA,eAAeD,OAAf","sourcesContent":["export const COUNT_PLUS = 'COUNT_PLUS';\r\nexport const COUNT_MINUS = 'COUNT_MINUS';\r\nexport const COUNT_SET = 'COUNT_SET';\r\n\r\nexport type countState = {\r\n  count: number\r\n}\r\n\r\nexport const initialState: countState = {\r\n  count: 0\r\n};\r\n\r\nexport const countPlusAction = () => ({\r\n  type: COUNT_PLUS\r\n});\r\n\r\nexport const countMinusAction = () => ({\r\n  type: COUNT_MINUS\r\n})\r\n\r\nexport const setCountAction = (value: number) => ({\r\n  type: COUNT_SET,\r\n  count: value\r\n})\r\n\r\ntype actions = {\r\n  type: string\r\n} & countState\r\n\r\nconst reducer = (state: countState = initialState, action: actions): countState | undefined => {\r\n  switch (action.type) {\r\n    case COUNT_PLUS:\r\n      return {\r\n        ...state,\r\n        count: state.count + 1\r\n      }\r\n    case COUNT_MINUS:\r\n      return {\r\n        ...state,\r\n        count: state.count - 1\r\n      }\r\n    case COUNT_SET:\r\n      const { count } = action;\r\n      return {\r\n        ...state,\r\n        count: count\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}