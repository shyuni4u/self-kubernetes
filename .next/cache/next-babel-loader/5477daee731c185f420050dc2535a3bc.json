{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shyuniz\\\\Desktop\\\\moreh\\\\self-kubernetes\\\\components\\\\organisms\\\\ClusterModnn.tsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Panel from '../atoms/Panel';\nimport ModnnConfig from '../../lib/setting.json';\nconst conn = axios.create({\n  baseURL: ModnnConfig.modnn.ip,\n  timeout: 10 * 1000\n});\nexport const ClusterModnn = () => {\n  const {\n    0: result,\n    1: setResult\n  } = useState(undefined);\n  useEffect(() => {\n    let unmount = false;\n\n    const onLoadApi = () => {\n      conn.get('/modnn').then(response => {\n        if (unmount) return;\n\n        if (response.status === 200) {\n          console.log(response.data);\n          setResult(response.data);\n        } else {\n          setResult(undefined);\n        }\n      }).catch(error => {\n        if (unmount) return;\n        console.log('error', error);\n      });\n    };\n\n    const interval = setInterval(() => {\n      onLoadApi();\n    }, 1000);\n    return () => {\n      unmount = true;\n      clearInterval(interval);\n    };\n  }, []);\n  return __jsx(Panel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 10\n    }\n  }, \"TEST\");\n};\nexport default ClusterModnn;","map":{"version":3,"sources":["C:/Users/shyuniz/Desktop/moreh/self-kubernetes/components/organisms/ClusterModnn.tsx"],"names":["React","useEffect","useState","axios","Panel","ModnnConfig","conn","create","baseURL","modnn","ip","timeout","ClusterModnn","result","setResult","undefined","unmount","onLoadApi","get","then","response","status","console","log","data","catch","error","interval","setInterval","clearInterval"],"mappings":";;AAAA,OAAOA,KAAP,IAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,OAAOC,KAAP,MAAkB,gBAAlB;AAEA,OAAOC,WAAP,MAAwB,wBAAxB;AAEA,MAAMC,IAAI,GAAGH,KAAK,CAACI,MAAN,CAAa;AACxBC,EAAAA,OAAO,EAAEH,WAAW,CAACI,KAAZ,CAAkBC,EADH;AAExBC,EAAAA,OAAO,EAAE,KAAK;AAFU,CAAb,CAAb;AAKA,OAAO,MAAMC,YAAsB,GAAG,MAAM;AAC1C,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBZ,QAAQ,CAAMa,SAAN,CAApC;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,OAAO,GAAG,KAAd;;AACA,UAAMC,SAAS,GAAG,MAAM;AACtBX,MAAAA,IAAI,CACDY,GADH,CACO,QADP,EAEGC,IAFH,CAESC,QAAD,IAAc;AAClB,YAAIJ,OAAJ,EAAa;;AACb,YAAII,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,UAAAA,OAAO,CAACC,GAAR,CAAYH,QAAQ,CAACI,IAArB;AACAV,UAAAA,SAAS,CAACM,QAAQ,CAACI,IAAV,CAAT;AACD,SAHD,MAGO;AACLV,UAAAA,SAAS,CAACC,SAAD,CAAT;AACD;AACF,OAVH,EAWGU,KAXH,CAWUC,KAAD,IAAW;AAChB,YAAIV,OAAJ,EAAa;AACbM,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,KAArB;AACD,OAdH;AAeD,KAhBD;;AAkBA,UAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAM;AACjCX,MAAAA,SAAS;AACV,KAF2B,EAEzB,IAFyB,CAA5B;AAIA,WAAO,MAAM;AACXD,MAAAA,OAAO,GAAG,IAAV;AACAa,MAAAA,aAAa,CAACF,QAAD,CAAb;AACD,KAHD;AAID,GA5BQ,EA4BN,EA5BM,CAAT;AA8BA,SAAO,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,CAlCM;AAoCP,eAAef,YAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport styled from 'styled-components';\r\n\r\nimport Panel from '../atoms/Panel';\r\n\r\nimport ModnnConfig from '../../lib/setting.json';\r\n\r\nconst conn = axios.create({\r\n  baseURL: ModnnConfig.modnn.ip,\r\n  timeout: 10 * 1000\r\n});\r\n\r\nexport const ClusterModnn: React.FC = () => {\r\n  const [result, setResult] = useState<any>(undefined);\r\n\r\n  useEffect(() => {\r\n    let unmount = false;\r\n    const onLoadApi = () => {\r\n      conn\r\n        .get('/modnn')\r\n        .then((response) => {\r\n          if (unmount) return;\r\n          if (response.status === 200) {\r\n            console.log(response.data);\r\n            setResult(response.data);\r\n          } else {\r\n            setResult(undefined);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          if (unmount) return;\r\n          console.log('error', error);\r\n        });\r\n    };\r\n\r\n    const interval = setInterval(() => {\r\n      onLoadApi();\r\n    }, 1000);\r\n\r\n    return () => {\r\n      unmount = true;\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return <Panel>TEST</Panel>;\r\n};\r\n\r\nexport default ClusterModnn;\r\n"]},"metadata":{},"sourceType":"module"}