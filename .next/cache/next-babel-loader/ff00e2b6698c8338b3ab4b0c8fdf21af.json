{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shyuniz\\\\Desktop\\\\moreh\\\\self-kubernetes\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React, { useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Button from '../components/atoms/Button';\nimport { Todo } from '../components/organisms/Todo';\nimport Wrapper from '../components/organisms/Wrapper';\nimport ClusterModnn from '../components/organisms/ClusterHex';\nexport let ClusterMode;\n\n(function (ClusterMode) {\n  ClusterMode[\"none\"] = \"\";\n  ClusterMode[\"hex\"] = \"hex\";\n  ClusterMode[\"chart\"] = \"chart\";\n  ClusterMode[\"modnn\"] = \"modnn\";\n})(ClusterMode || (ClusterMode = {}));\n\nexport const Index = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    0: moreh,\n    1: setMoreh\n  } = useState(false);\n  const {\n    0: mode,\n    1: setMode\n  } = useState(ClusterMode.modnn);\n  const kubernetes = {\n    title: 'Kubernetes',\n    subtitle: 'Kubernetes API test',\n    items: [{\n      name: 'API' // link: 'kubernetes/test'\n\n    } // {\n    //   name: 'login'\n    // },\n    // {\n    //   name: 'token'\n    // }\n    ]\n  };\n  const nvidia = {\n    title: 'NVIDIA',\n    subtitle: 'dashboard (nvidia-smi)',\n    items: [{\n      name: 'p100',\n      link: 'nvidia/dashboard'\n    }]\n  };\n  const amd = {\n    title: 'AMD',\n    subtitle: 'dashboard (rocm-smi)',\n    items: [{\n      name: 'rx51',\n      link: 'amd/dashboard1'\n    }, {\n      name: 'rx52',\n      link: 'amd/dashboard2'\n    }]\n  };\n  const etc = {\n    title: 'DASHBOARD',\n    items: [{\n      name: 'manual',\n      link: 'total/manual'\n    }, {\n      name: 'p100 + rx51 + rx52',\n      link: 'total/dashboard'\n    }]\n  };\n  const doc = {\n    title: 'Document',\n    items: [{\n      name: 'README',\n      link: 'doc/readme'\n    }, {\n      name: 'dev test',\n      link: 'doc/test'\n    }]\n  }; // const changelanguageToKo = () => i18n.changeLanguage('ko');\n  // const changelanguageToEn = () => i18n.changeLanguage('en');\n\n  return __jsx(Wrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      margin: '10px 0',\n      textAlign: 'center',\n      fontWeight: 600\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  }, \"Admin Page\"), __jsx(\"nav\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    primary: moreh,\n    onClick: () => setMoreh(prev => !prev),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, moreh ? 'Moreh > User' : 'User > Moreh'), !moreh && __jsx(React.Fragment, null, __jsx(Button, {\n    style: {\n      backgroundColor: mode === ClusterMode.modnn ? '#b06601' : '',\n      color: mode === ClusterMode.modnn ? '#ffd36b' : ''\n    },\n    onClick: () => setMode(ClusterMode.modnn),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"modnn\"))), !moreh && mode === ClusterMode.modnn && __jsx(ClusterModnn, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 48\n    }\n  }), moreh && __jsx(React.Fragment, null, __jsx(Todo, _extends({}, etc, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  })), __jsx(Todo, _extends({}, doc, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  })), __jsx(Todo, _extends({}, nvidia, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  })), __jsx(Todo, _extends({}, amd, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  })), __jsx(Todo, _extends({}, kubernetes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default Index;","map":{"version":3,"sources":["C:/Users/shyuniz/Desktop/moreh/self-kubernetes/pages/index.tsx"],"names":["React","useState","useTranslation","Button","Todo","Wrapper","ClusterModnn","ClusterMode","Index","t","moreh","setMoreh","mode","setMode","modnn","kubernetes","title","subtitle","items","name","nvidia","link","amd","etc","doc","margin","textAlign","fontWeight","prev","backgroundColor","color"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,cAAT,QAA+B,eAA/B;AAEA,OAAOC,MAAP,MAAmB,4BAAnB;AAEA,SAASC,IAAT,QAAgC,8BAAhC;AACA,OAAOC,OAAP,MAAoB,iCAApB;AAGA,OAAOC,YAAP,MAAyB,oCAAzB;AAEA,WAAYC,WAAZ;;WAAYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W;;AAOZ,OAAO,MAAMC,KAAe,GAAG,MAAM;AACnC,QAAM;AAAEC,IAAAA;AAAF,MAAQP,cAAc,EAA5B;AACA,QAAM;AAAA,OAACQ,KAAD;AAAA,OAAQC;AAAR,MAAoBV,QAAQ,CAAU,KAAV,CAAlC;AACA,QAAM;AAAA,OAACW,IAAD;AAAA,OAAOC;AAAP,MAAkBZ,QAAQ,CAASM,WAAW,CAACO,KAArB,CAAhC;AAEA,QAAMC,UAAqB,GAAG;AAC5BC,IAAAA,KAAK,EAAE,YADqB;AAE5BC,IAAAA,QAAQ,EAAE,qBAFkB;AAG5BC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,KADR,CAEE;;AAFF,KADK,CAKL;AACA;AACA;AACA;AACA;AACA;AAVK;AAHqB,GAA9B;AAgBA,QAAMC,MAAiB,GAAG;AACxBJ,IAAAA,KAAK,EAAE,QADiB;AAExBC,IAAAA,QAAQ,EAAE,wBAFc;AAGxBC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,MADR;AAEEE,MAAAA,IAAI,EAAE;AAFR,KADK;AAHiB,GAA1B;AAUA,QAAMC,GAAc,GAAG;AACrBN,IAAAA,KAAK,EAAE,KADc;AAErBC,IAAAA,QAAQ,EAAE,sBAFW;AAGrBC,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,MADR;AAEEE,MAAAA,IAAI,EAAE;AAFR,KADK,EAKL;AACEF,MAAAA,IAAI,EAAE,MADR;AAEEE,MAAAA,IAAI,EAAE;AAFR,KALK;AAHc,GAAvB;AAcA,QAAME,GAAc,GAAG;AACrBP,IAAAA,KAAK,EAAE,WADc;AAErBE,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,QADR;AAEEE,MAAAA,IAAI,EAAE;AAFR,KADK,EAKL;AACEF,MAAAA,IAAI,EAAE,oBADR;AAEEE,MAAAA,IAAI,EAAE;AAFR,KALK;AAFc,GAAvB;AAaA,QAAMG,GAAc,GAAG;AACrBR,IAAAA,KAAK,EAAE,UADc;AAErBE,IAAAA,KAAK,EAAE,CACL;AACEC,MAAAA,IAAI,EAAE,QADR;AAEEE,MAAAA,IAAI,EAAE;AAFR,KADK,EAKL;AACEF,MAAAA,IAAI,EAAE,UADR;AAEEE,MAAAA,IAAI,EAAE;AAFR,KALK;AAFc,GAAvB,CA1DmC,CAwEnC;AACA;;AACA,SACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE;AAAI,IAAA,KAAK,EAAE;AAAEI,MAAAA,MAAM,EAAE,QAAV;AAAoBC,MAAAA,SAAS,EAAE,QAA/B;AAAyCC,MAAAA,UAAU,EAAE;AAArD,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAEjB,KAAjB;AAAwB,IAAA,OAAO,EAAE,MAAMC,QAAQ,CAAEiB,IAAD,IAAU,CAACA,IAAZ,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlB,KAAK,GAAG,cAAH,GAAoB,cAD5B,CADF,EAIG,CAACA,KAAD,IACC,4BACE,MAAC,MAAD;AACE,IAAA,KAAK,EAAE;AACLmB,MAAAA,eAAe,EAAEjB,IAAI,KAAKL,WAAW,CAACO,KAArB,GAA6B,SAA7B,GAAyC,EADrD;AAELgB,MAAAA,KAAK,EAAElB,IAAI,KAAKL,WAAW,CAACO,KAArB,GAA6B,SAA7B,GAAyC;AAF3C,KADT;AAKE,IAAA,OAAO,EAAE,MAAMD,OAAO,CAACN,WAAW,CAACO,KAAb,CALxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CALJ,CARF,EA+CG,CAACJ,KAAD,IAAUE,IAAI,KAAKL,WAAW,CAACO,KAA/B,IAAwC,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/C3C,EAiDGJ,KAAK,IACJ,4BACE,MAAC,IAAD,eAAUa,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,EAEE,MAAC,IAAD,eAAUC,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGE,MAAC,IAAD,eAAUJ,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHF,EAIE,MAAC,IAAD,eAAUE,GAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAJF,EAKE,MAAC,IAAD,eAAUP,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KALF,CAlDJ,CADF;AA6DD,CAvIM;AAyIP,eAAeP,KAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport Button from '../components/atoms/Button';\r\n\r\nimport { Todo, TodoProps } from '../components/organisms/Todo';\r\nimport Wrapper from '../components/organisms/Wrapper';\r\nimport ClusterChart from '../components/organisms/ClusterChart';\r\nimport ClusterHex from '../components/organisms/ClusterHex';\r\nimport ClusterModnn from '../components/organisms/ClusterHex';\r\n\r\nexport enum ClusterMode {\r\n  none = '',\r\n  hex = 'hex',\r\n  chart = 'chart',\r\n  modnn = 'modnn'\r\n}\r\n\r\nexport const Index: React.FC = () => {\r\n  const { t } = useTranslation();\r\n  const [moreh, setMoreh] = useState<boolean>(false);\r\n  const [mode, setMode] = useState<string>(ClusterMode.modnn);\r\n\r\n  const kubernetes: TodoProps = {\r\n    title: 'Kubernetes',\r\n    subtitle: 'Kubernetes API test',\r\n    items: [\r\n      {\r\n        name: 'API'\r\n        // link: 'kubernetes/test'\r\n      }\r\n      // {\r\n      //   name: 'login'\r\n      // },\r\n      // {\r\n      //   name: 'token'\r\n      // }\r\n    ]\r\n  };\r\n  const nvidia: TodoProps = {\r\n    title: 'NVIDIA',\r\n    subtitle: 'dashboard (nvidia-smi)',\r\n    items: [\r\n      {\r\n        name: 'p100',\r\n        link: 'nvidia/dashboard'\r\n      }\r\n    ]\r\n  };\r\n  const amd: TodoProps = {\r\n    title: 'AMD',\r\n    subtitle: 'dashboard (rocm-smi)',\r\n    items: [\r\n      {\r\n        name: 'rx51',\r\n        link: 'amd/dashboard1'\r\n      },\r\n      {\r\n        name: 'rx52',\r\n        link: 'amd/dashboard2'\r\n      }\r\n    ]\r\n  };\r\n  const etc: TodoProps = {\r\n    title: 'DASHBOARD',\r\n    items: [\r\n      {\r\n        name: 'manual',\r\n        link: 'total/manual'\r\n      },\r\n      {\r\n        name: 'p100 + rx51 + rx52',\r\n        link: 'total/dashboard'\r\n      }\r\n    ]\r\n  };\r\n  const doc: TodoProps = {\r\n    title: 'Document',\r\n    items: [\r\n      {\r\n        name: 'README',\r\n        link: 'doc/readme'\r\n      },\r\n      {\r\n        name: 'dev test',\r\n        link: 'doc/test'\r\n      }\r\n    ]\r\n  };\r\n\r\n  // const changelanguageToKo = () => i18n.changeLanguage('ko');\r\n  // const changelanguageToEn = () => i18n.changeLanguage('en');\r\n  return (\r\n    <Wrapper>\r\n      {/* <button type={'button'} onClick={changelanguageToKo}>\r\n        한국어\r\n      </button>\r\n      <button type={'button'} onClick={changelanguageToEn}>\r\n        English\r\n      </button> */}\r\n      <h1 style={{ margin: '10px 0', textAlign: 'center', fontWeight: 600 }}>Admin Page</h1>\r\n      <nav>\r\n        <Button primary={moreh} onClick={() => setMoreh((prev) => !prev)}>\r\n          {moreh ? 'Moreh > User' : 'User > Moreh'}\r\n        </Button>\r\n        {!moreh && (\r\n          <>\r\n            <Button\r\n              style={{\r\n                backgroundColor: mode === ClusterMode.modnn ? '#b06601' : '',\r\n                color: mode === ClusterMode.modnn ? '#ffd36b' : ''\r\n              }}\r\n              onClick={() => setMode(ClusterMode.modnn)}\r\n            >\r\n              modnn\r\n            </Button>\r\n            {/* <Button\r\n              style={{\r\n                backgroundColor: mode === ClusterMode.hex ? '#b06601' : '',\r\n                color: mode === ClusterMode.hex ? '#ffd36b' : ''\r\n              }}\r\n              onClick={() => setMode(ClusterMode.hex)}\r\n            >\r\n              hex\r\n            </Button>\r\n            <Button\r\n              style={{\r\n                backgroundColor: mode === ClusterMode.chart ? '#b06601' : '',\r\n                color: mode === ClusterMode.chart ? '#ffd36b' : ''\r\n              }}\r\n              onClick={() => setMode(ClusterMode.chart)}\r\n            >\r\n              chart\r\n            </Button> */}\r\n          </>\r\n        )}\r\n      </nav>\r\n\r\n      {/* {!moreh && mode === ClusterMode.chart && <ClusterChart />}\r\n      {!moreh && mode === ClusterMode.hex && <ClusterHex />} */}\r\n      {!moreh && mode === ClusterMode.modnn && <ClusterModnn />}\r\n\r\n      {moreh && (\r\n        <>\r\n          <Todo {...etc} />\r\n          <Todo {...doc} />\r\n          <Todo {...nvidia} />\r\n          <Todo {...amd} />\r\n          <Todo {...kubernetes} />\r\n        </>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n"]},"metadata":{},"sourceType":"module"}